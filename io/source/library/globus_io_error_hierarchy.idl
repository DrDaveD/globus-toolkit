#
# this IDL is not used by the globus build process.  it is a developer
# tool to drive automatic regeneration of the object and error type hierarchy
# code and/or documentation from one concise definition.  it is part of a very 
# special-purpose hack.
#
# please do not change these files unless you really know what you are doing!
#
#

# IDL format
# type:parenttype{instance fields}stringfunc:indication
#
# types are shorthand (just the unique part of the GLOBUS_ERROR_TYPE_* name)
# list local instance fields only (not inherited)
# instance fields default to globus_object_t * type if none given
# instance fields separated by comma
# indication is english comment for web doc
#
# entries must be in order, supertype before subtype
#
# BASE is handled specially and has no parent type in the IDL
 
BASE : { globus_module_descriptor_t * source, cause }

SECURITY_FAILED: BASE { globus_io_handle_t * handle, int maj_stat, int min_stat, int token_stat } NULL :a security operation failed
# Types of errors
    AUTHENTICATION_FAILED: SECURITY_FAILED { } NULL :an authentication operation failed
    AUTHORIZATION_FAILED: SECURITY_FAILED { } NULL :an authorization operation failed
        UNAUTHORIZED_IDENTITY: AUTHORIZATION_FAILED { char * identity } NULL :an authorization operation failed
    BAD_PROTECTION: SECURITY_FAILED { } NULL :a protection operation failed
# And their causes
    NO_SEC_CONTEXT: SECURITY_FAILED { } NULL :an attempt to use a non-existant security context
    CONTEXT_EXPIRED: SECURITY_FAILED { } NULL :a security context expired
    CREDENTIALS_EXPIRED: SECURITY_FAILED { } NULL :a security credential expired
    NO_CREDENTIALS: SECURITY_FAILED { } NULL :a security credential expired
    INVALID_CREDENTIALS: SECURITY_FAILED { } NULL :a security credential expired

IO_FAILED: BASE { globus_io_handle_t * handle } NULL :an I/O operation failed
   SYSTEM_FAILURE: IO_FAILED { int save_errno } NULL :an I/O operation failed due to system error
   EOF: IO_FAILED { } NULL :an end-of-file was reached
   IO_CANCELLED: IO_FAILED { } NULL :an I/O operation was cancelled

BAD_PARAMETER: BASE { char * name, int position, char * function } NULL :a bad parameter was passed to this function
   BAD_POINTER: BAD_PARAMETER { } NULL :a bad pointer was passed in by the user
      NULL_PARAMETER: BAD_POINTER { } NULL :a NULL parameter was passed in by the user
   INVALID_TYPE: BAD_PARAMETER { char * required_type_string } NULL :a parameter of an incorrect type was passed to this function
   IMMUTABLE_ATTRIBUTE: BAD_PARAMETER { char * attribute_name } NULL :an attempt to change an immutable attribute
   ATTRIBUTE_MISMATCH: BAD_PARAMETER { char * attr1, char * attr2 } NULL :an attempt to change an immutable attribute
   INVALID_NAME: BAD_PARAMETER { char * unresolvable_name } NULL :a name could not be used
      HOST_NOT_FOUND: INVALID_NAME { } NULL :a host name could not be resolved
   INVALID_PORT: BAD_PARAMETER { } NULL :the requested port could not be used
      RESTRICTED_PORT: INVALID_PORT { } NULL :the user has insufficient permissions to use the desired port
      PORT_IN_USE: INVALID_PORT { } NULL :the requested port was already in use
   NOT_INITIALIZED: BAD_PARAMETER { } NULL :an uninitialized data structure was passed in by the user

REGISTRATION_ERROR: BASE {globus_io_handle_t * handle} NULL :a registration operation failed
   READ_ALREADY_REGISTERED: REGISTRATION_ERROR { } NULL :the handle was already registered for reading
   WRITE_ALREADY_REGISTERED: REGISTRATION_ERROR { } NULL :the handle was already registered for reading
   EXCEPT_ALREADY_REGISTERED: REGISTRATION_ERROR { } NULL :the handle was already registreed for exception handling
   CLOSE_ALREADY_REGISTERED: REGISTRATION_ERROR { } NULL :the handle was already registered for closing

INTERNAL_ERROR: BASE { char * function } NULL:an internal error occurred
