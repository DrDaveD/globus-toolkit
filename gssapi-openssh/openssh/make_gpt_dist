#!/usr/bin/env perl

#
# the default source directory name should be 'gsi-openssh'.  Change at will to
# suit your needs.
#

$srcdirname = "gsi-openssh";

#
# uncomment when we're more mature
#
#for my $subdir ('packaging_tools', 'package_management', 'archive_compress') {
#  chdir "$subdir" or die "Unable to cd to $subdir: $?";
#  if(-e "config.cache")
#    {
#      #config.cache is tested for because it is generated when ./configure is executed
#      #if config.cache is present, then a make distclean must be performed in order
#      #to remove the cache.  if a make distclean is run and config.cache is not 
#      #present, then this script will recieve a zero from the system and error.
#      
#      system("make distclean");
#    }
#
#  chdir ".."  or die "Unable to cd to packaging: $?";
#}

#
# uncomment when we've got a better place to get the current version from
#
# determine gpt version number
#
#open (CFG, 'packaging_tools/configure.in');
#
#my $version;
#for (<CFG>) {
#  if (m!AM_INIT_AUTOMAKE\(\w+,([^,\)]+)!) {
#    $version = $1;
#    $version =~ s!\s+!!g;
#  }
#}

#
# test to make sure we're okay to create/use the $srcdirname directories.
#

if ( (!defined($srcdirname)) || length($srcdirname) le 0 )
{
    printf("\$srcdirname must be defined to a usable value!\n");
    die;
}

if ( -e "../$srcdirname" )
{
    printf("found '$srcdirname' in parent directory... please remove before continuing\n");
    die;
}

if ( -e "./$srcdirname" )
{
    printf("found '$srcdirname' in current directory... please remove before continuing\n");
    die;
}

#
# prep the source directory by creating a temp directory containing all of the
# required files.
#

printf("copying files into source directory...\n");
system("mkdir ../$srcdirname")==0 or die "Unable to create ../$srcdirname: $?";
system("cp -rf * ../$srcdirname")==0 or die "Unable to copy . into ../$srcdirname: $?";
system("mv ../$srcdirname ./$srcdirname")==0 or die "Unable to move $srcdirname from ../ to ./: $?";

chdir("./$srcdirname");

#
# remove any 'unnecessary' files from the source directory.
#

printf("pruning source directory of extraneous files...\n");
system("rm -rf `find . -name CVS -print`")==0 or die "Unable to remove cvs directories: $?";
system("rm -f ./make_gpt_dist")==0 or die "Unable to remove gpt script: $?";
system("rm -rf ./gpt")==0 or die "Unable to remove gpt directory: $?";

#
# run the standard development tools to get the necessary derived files.
#

printf("running autoheader...\n");
system("autoheader")==0 or die "Could not run autoheader: $?";

printf("running autoconf...\n");
system("autoconf")==0 or die "Could not run autoheader: $?";

chdir("../");

#
# create the source package from the source directory.
#

printf("creating source tarball 'gsi-openssh.tar.gz'...\n");
system("tar -cf gsi-openssh.tar ./$srcdirname")==0 or die "Unable to create gsi-openssh.tar: $?";
system("gzip -f gsi-openssh.tar")==0 or die "Unable to gzip gsi-openssh.tar: $?";

printf("cleaning up after myself...\n");
system("rm -rf ./$srcdirname")==0 or die "Unable to remove ./$srcdirname: $?";

#
# done.
#

printf("done.\n");
