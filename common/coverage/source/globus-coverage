#! /usr/bin/env perl

# Copyright 1999-2008 University of Chicago
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BEGIN {
    if (exists $ENV{GPT_LOCATION}) {
        push(@INC, $ENV{GPT_LOCATION}.'/lib/perl');
    }
    if (exists $ENV{GLOBUS_LOCATION}) {
        push(@INC, $ENV{GLOBUS_LOCATION}.'/lib/perl');
    }
}

use strict;
use HTML::Template;
use File::Copy;
use File::Path;
use Getopt::Long;
use Globus::Coverage::Bundle;
use Carp;

my $gdir = $ENV{GLOBUS_LOCATION} || die "GLOBUS_LOCATION not set\n";
my $datadir = "$gdir/share/globus_coverage";

my @package_dirs=();
my $output_dir="coverage";
my $parser_class="Globus::Coverage::GCovParser";
my $bundle_name="Summary";
my $help = 0;

my $result = GetOptions("output-dir|o=s"   => \$output_dir,
                        "bundle-name|b=s"  => \$bundle_name,
                        "help|h"           => \$help,
                        "parser|p=s"       => \$parser_class);

@package_dirs = @ARGV;

if ($help || scalar(@package_dirs) == 0)
{
    my $basename = $0;
    $basename =~ s|.*/||;

    print <<EOF;
Usage: $basename [OPTION] package-directory [package-directory ...]
Options:
 -b | --bundle-name NAME     Use NAME as the bundle name for the coverage
                             report [default=Summary].
 -h | --help                 Print this help message.
 -o | --output-dir DIR       Place report output in DIR [default=coverage].
 -p | --parser-class CLASS   Use the specified profiling parser module
                             [default="Globus::Coverage::GCovParser"].
EOF

    exit $help;
}
 eval "require $parser_class";

my $parser = new $parser_class();
my $bundle = new Globus::Coverage::Bundle($bundle_name);

mkpath([$output_dir]);
copy("$datadir/coverage.css", $output_dir);

# MAIN
foreach my $package_dir (@package_dirs) {
    if (! -f "$package_dir/Makefile") {
        print "Package directory \"$package_dir\" invalid...skipping\n";
        next;
    }
    my $package_name = `grep "^PACKAGE = " "$package_dir/Makefile"`;
    my $package_info;
    chomp($package_name);
    $package_name =~ s/.*=\s*//;
    $parser->package_name($package_name);
    $parser->package_dir($package_dir);

    $package_info = $parser->process();
    $bundle->package($package_name, $package_info);

    &create_package_file($package_info);
}
&create_bundle_file($bundle);


sub create_package_file {
    my $package_info = shift;
    my $template = HTML::Template->new(filename => "$datadir/package.template");
    my $template_summary = [];
    my $classidx = 0;
    my $outfile = "$output_dir/package-".$package_info->name().".html";

    local(*INDEX);
    open(INDEX, ">$outfile") || croak("Unable to create output file: $outfile\n");
    print "Creating package summary file: $outfile\n";

    foreach my $filename ($package_info->file_names()) {
        my $fileinfo = $package_info->file($filename);
        if ($fileinfo->lines() == 0)
        {
            next;
        }

        &create_file_page($package_info, $fileinfo);
        &create_source_page($fileinfo);
        push(@{$template_summary}, 
            {
                file => $filename,
                func_percentage => 
                    sprintf('%02.02f', $fileinfo->function_coverage()->[2]),
                branch_percentage =>
                    sprintf('%02.02f', $fileinfo->branch_coverage()->[2]),
                statement_percentage =>
                    sprintf('%02.02f', $fileinfo->statement_coverage()->[2])
            });
    }


    $template_summary =
        [sort
            { $a->{statement_percentage} <=> $b->{statement_percentage} }
            @{$template_summary}];

    foreach (@{$template_summary})
    {
        $_->{parity} = $classidx++ % 2;
    }
    $template->param(BUNDLE => $bundle->name());
    $template->param(PACKAGE => $package_info->name());
    $template->param(SUMMARY => $template_summary);
    $template->param(
        func_percentage =>
                sprintf('%02.02f', $package_info->function_coverage()->[2]),
        branch_percentage =>
                sprintf('%02.02f', $package_info->branch_coverage()->[2]),
        statement_percentage =>
                sprintf('%02.02f', $package_info->statement_coverage()->[2]));

    print INDEX $template->output();

    close(INDEX);
}

sub create_file_page {
    my $pkginfo = shift;
    my $fileinfo = shift;
    my $template = HTML::Template->new(filename => "$datadir/file.template");
    my $classidx = 0;
    my $template_summary = [];
    my $lines;
    my $output_file = "$output_dir/summary-".$fileinfo->name().".html";

    $lines = $fileinfo->lines();
    if ($lines == 0) {
        return;
    }

    local(*FILE_PAGE);

    open (FILE_PAGE, ">$output_file") || croak("Unable to create output file: $output_file\n");
    print "Creating file summary: $output_file\n";

    foreach my $function ($fileinfo->function_names()) {
        my $funcinfo = $fileinfo->function($function);

        if ($funcinfo->statement_coverage()->[0] == 0) {
            next;
        }
        push(@{$template_summary}, 
            {
                function => $function,
                branch_percentage =>
                    sprintf('%02.02f', $funcinfo->branch_coverage()->[2]),
                statement_percentage => 
                    sprintf('%02.02f', $funcinfo->statement_coverage()->[2])
            });
    }
    $template_summary =
        [sort
            { $a->{statement_percentage} <=> $b->{statement_percentage} }
            @{$template_summary}];

    foreach (@{$template_summary})
    {
        $_->{parity} = $classidx++ % 2;
    }

    $template->param(BUNDLE => $bundle->name());
    $template->param(PACKAGE => $pkginfo->name());
    $template->param(FILE => $fileinfo->name());
    $template->param(BRANCH_PERCENTAGE => 
            sprintf('%02.02f', $fileinfo->branch_coverage()->[2]));
    $template->param(STATEMENT_PERCENTAGE =>
            sprintf('%02.02f', $fileinfo->statement_coverage()->[2]));
    $template->param(FUNCTION => $template_summary);
    print FILE_PAGE $template->output();

    close(FILE_PAGE);
}

sub create_source_page {
    my $fileinfo = shift;
    my $template = HTML::Template->new(filename => "$datadir/source.template");
    my $classidx = 0;
    my @classstrs = ("", "class=\"odd\"");
    my $template_lines = [];
    my $lines;
    my $output_file = "$output_dir/source-".$fileinfo->name().".html";

    $lines = $fileinfo->lines();

    if ($lines == 0) {
        return;
    }
    local(*FILE_PAGE);

    open (FILE_PAGE, ">$output_file") || croak("Unable to create output file: $output_file\n");
    print "Creating file source: $output_file\n";

    for (my $line = 1; $line < $lines; $line++) {
        my $line_coverage = $fileinfo->line_coverage($line);
        my $count = $line_coverage->[1];
        my $text = $line_coverage->[2];
        my $line_info = {};

        $line_info->{LINE} = $line;
        if ($count eq '-') {
            $line_info->{COUNT} = '';
            $line_info->{TEXT} = $text;
            $line_info->{EXECUTABLE} = 0;
        } elsif ($count == 0) {
            $line_info->{COUNT} = 0;
            $line_info->{TEXT} = $text;
            $line_info->{EXECUTABLE} = 1;
        } else {
            $line_info->{COUNT} = $count;
            $line_info->{TEXT} = $text;
            $line_info->{EXECUTABLE} = 1;
        }
        push(@{$template_lines}, $line_info);
    }

    $template->param(FILE => $fileinfo->name());
    $template->param(LINES => $template_lines);
    print FILE_PAGE $template->output();

    close(FILE_PAGE);
}

sub create_bundle_file
{
    my $bundle_info = shift;
    my $template = HTML::Template->new(filename => "$datadir/bundle.template");
    my $template_summary = [];
    my $classidx = 0;
    my $outfile = "$output_dir/index.html";

    local(*INDEX);
    open(INDEX, ">$outfile") || croak("Unable to create output file: $outfile\n");
    print "Creating summary file: $outfile\n";

    foreach my $pkgname ($bundle_info->package_names()) {
        my $pkginfo = $bundle_info->package($pkgname);

        if ($pkginfo->statement_coverage()->[0] == 0) {
            next;
        }

        push(@{$template_summary}, 
            {
                package => $pkgname,
                func_percentage => 
                    sprintf('%02.02f', $pkginfo->function_coverage()->[2]),
                branch_percentage =>
                    sprintf('%02.02f', $pkginfo->branch_coverage()->[2]),
                statement_percentage =>
                    sprintf('%02.02f', $pkginfo->statement_coverage()->[2])
            });
    }


    $template_summary =
        [sort
            { $a->{statement_percentage} <=> $b->{statement_percentage} }
            @{$template_summary}];

    foreach (@{$template_summary})
    {
        $_->{parity} = $classidx++ % 2;
    }
    $template->param(NAME => $bundle_info->name());
    $template->param(PACKAGES => $template_summary);
    $template->param(
        func_percentage =>
                sprintf('%02.02f', $bundle_info->function_coverage()->[2]),
        branch_percentage =>
                sprintf('%02.02f', $bundle_info->branch_coverage()->[2]),
        statement_percentage =>
                sprintf('%02.02f', $bundle_info->statement_coverage()->[2]));

    print INDEX $template->output();

    close(INDEX);
}
