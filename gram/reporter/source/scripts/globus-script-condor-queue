#! /bin/sh
#
# List the jobs using condor_q.
#
# The Status field can contain one of the following strings:
#
# string  stands for          Globus context meaning
# --------------------------------------------------------------------
# U       Unexpanded (never been run)     PENDING
# R       Running          ACTIVE
# I       Idle (waiting for a machine to    SUSPENDED
#               execute on)
# H       on Hold          SUSPENDED
# C       Completed          DONE
# X       Removed          FAILED
#
# condor_q -l job status number conversion to condor job status description
# 0 --> Unexpanded
# 1 --> Idle
# 2 --> Running
# 3 --> Removed
# 4 --> Completed
# 5 --> Held
# 6 --> Submission_Err


. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh


condor_q=${GLOBUS_SH_CONDOR_Q-condor_q}
condor_status=${GLOBUS_SH_CONDOR_STATUS-condor_status}
awk=${GLOBUS_SH_AWK-awk}
cp=${GLOBUS_SH_CP-cp}
date=${GLOBUS_SH_DATE-date}
expr=${GLOBUS_SH_EXPR-expr}
grep=${GLOBUS_SH_GREP-grep}
ls=${GLOBUS_SH_LS-ls}
sed=${GLOBUS_SH_SED-sed}
rm=${GLOBUS_SH_RM-rm}
touch=${GLOBUS_SH_TOUCH-touch}


condor_arch="$1"
condor_os="$2"
tmp_file="${local_tmpdir}/globus_tmp_file.$$"
cs_tmp_file="${local_tmpdir}/condor_status.tmp"
cq_tmp_file="${local_tmpdir}/condor_q.tmp"


DEBUG_ECHO=:
#DEBUG_ECHO=echo


###########################################################
#
# printUsage
#
printUsage () {
echo "Usage:  globus-script-condor-queue [ condor_arch condor_os ]"
echo ""
echo "condor_arch is the archetect name used by condor."
echo "              e.g. SUN4x, SUN4u, INTEL..."
echo "condor_os is the os name used by condor."
echo "              e.g. SOLARIS26, SOLARIS251..."
}



###########################################################
#
# CacheToLocal
#
#
# Check for cache files of the form $1.* and copy a non-stale
# one to $2 if it can be found. Also remove any stale cache
# files.
#


CacheToLocal()
{
  if [ "${1}" = "" ] || [ "${2}" = "" ] ; then
     return 2
  fi


  ${touch} "${tmp_file}"
  now_ts=`${bindir}/globus-file-time -m "${tmp_file}"`
  stale_ts=`${expr} ${now_ts} - 29`


  cache_file=""


  ${rm} "${tmp_file}"
  ${ls} ${1}.* >"${tmp_file}"


  exec < "${tmp_file}"


  while [ 1 ] ; do


     read file


     if [ $? != 0 ] ; then
        break
     fi


     cache_ts=`echo ${file} | ${sed} 's/^.*\.\([0-9]*\)$/\1/'`


     if [ `${expr} $cache_ts \<= $now_ts \& $cache_ts \> $stale_ts` = '1' ] ; then


        cache_file="${file}"


     else


        ${rm} "${file}"


     fi


  done


  ${rm} "${tmp_file}"


  if [ "${cache_file}" != "" ] && { ${cp} "${cache_file}" "${2}" ; } ; then
     return 0
  else
     return 1
  fi
}


###########################################################
#
# LocalToCache
#
#
# Copy the file in $1 to $2.{ts}, where {ts} is a
# time-stamp value
#


LocalToCache()
{
  if [ "${1}" = "" ] || [ "${2}" = "" ] ; then
     return 2
  fi


  now_ts=`${bindir}/globus-file-time -m "${1}"`


  ${cp} "${1}" "${2}.${now_ts}"
}


###########################################################
#
# getNodeCount
#
#
# Get free and total nodes from the system
#


getNodeCount() {


  CacheToLocal "${cs_tmp_file}" "${tmp_file}"


  if [ -f "${tmp_file}" ] ; then
     condor_line=`${grep} -i "${condor_arch}/${condor_os}" "${tmp_file}"`
     ${rm} "${tmp_file}"
  elif test -x "${condor_status}" ; then
     ${condor_status} -total > "${tmp_file}"
     condor_line=`${grep} -i "${condor_arch}/${condor_os}" "${tmp_file}"`
     LocalToCache "${tmp_file}" "${cs_tmp_file}"
     ${rm} "${tmp_file}"
  else
     condor_line="0 0 0 0 0"
  fi


#  if test -x "${condor_status}" ; then
#      condor_line=`${condor_status} -total | ${grep} -i "${condor_arch}/${condor_os}"`
#  else
#      condor_line="0 0 0"
#  fi
  TOTALNODES=`echo ${condor_line} | ${awk} '{print $2}'`
  FREENODES=`echo ${condor_line} | ${awk} '{print $5}'`


  if test -z "$FREENODES" ; then
     ${DEBUG_ECHO} "setting condor free nodes to zero"
     FREENODES=0
  fi
  if test -z "$TOTALNODES" ; then
     ${DEBUG_ECHO} "setting condor total nodes to zero"
     TOTALNODES=0
  fi
}



############################################################
#
# outputQueueEntry
#
#
# convert scheduler specific information to the standard GRAM queue
# entry parameters.
#
# format GRAM_SCRIPT_QE:<GRAM parameter> <scheduler value>
#


outputQueueEntry() {


  # if all required fields have values then output the information
  if [ -n "${clusterid}" ] &&
     [ -n "${owner}" ] &&
     [ -n "${count}" ] &&
     [ -n "${jobstatus}" ] ; then
     echo "GRAM_SCRIPT_QE:startqueueentry"
     echo "GRAM_SCRIPT_QE:localjobid ${clusterid}"
     echo "GRAM_SCRIPT_QE:localusername ${owner}"
     echo "GRAM_SCRIPT_QE:count ${count}"
     echo "GRAM_SCRIPT_QE:status ${jobstatus}"
     echo "GRAM_SCRIPT_QE:endqueueentry"
  fi
  # reset info
  clusterid=""
  owner=""
  jobstatus=""
  count=""


}



###########################################################
#
# main
#
echo "Starting up..." >>/tmp/foo


$DEBUG_ECHO "JM_SCRIPT: in condor_list"


if [ -z "${condor_arch}" ] ; then
   echo "ERROR: condor_arch is undefined"
   echo ""
   printUsage
   exit 1
fi


if [ -z "${condor_os}" ] ; then
   echo "ERROR: condor_os is undefined"
   echo ""
   printUsage
   exit 1
fi


echo "GRAM_SCRIPT_Q:StartQueue"
echo "GRAM_SCRIPT_Q:queueName ${condor_arch}-${condor_os}"
echo "GRAM_SCRIPT_Q:maxtime 0"
echo "GRAM_SCRIPT_Q:maxCPUtime 0"
echo "GRAM_SCRIPT_Q:maxCount 0"
echo "GRAM_SCRIPT_Q:maxRunningJobs 0"
echo "GRAM_SCRIPT_Q:maxJobsInQueue 0"
echo "GRAM_SCRIPT_Q:maxTotalMemory 0"
echo "GRAM_SCRIPT_Q:maxSingleMemory 0"
getNodeCount
echo "GRAM_SCRIPT_Q:totalNodes ${TOTALNODES}"
echo "GRAM_SCRIPT_Q:freeNodes ${FREENODES}"
echo "GRAM_SCRIPT_Q:whenActive 0"
echo "GRAM_SCRIPT_Q:status 0"
echo "GRAM_SCRIPT_Q:dispatchType batch"
#echo "GRAM_SCRIPT_Q:priority 0"
#echo "GRAM_SCRIPT_Q:jobWait 0"
#echo "GRAM_SCRIPT_Q:schedulerSpecific"
echo "GRAM_SCRIPT_Q:EndQueue"


arch_os_match=0


CacheToLocal "${cq_tmp_file}" "${tmp_file}"


if [ -f "${tmp_file}" ] ; then
    :
elif test -x "${condor_q}" ; then
#    ${condor_q} -l > "${tmp_file}"
touch "${tmp_file}"
    LocalToCache "${tmp_file}" "${cq_tmp_file}"
else
    touch "${tmp_file}"
fi


exec < "${tmp_file}"


while [ 1 ] ; do


   read entry


   if [ $? != 0 ] ; then
      break
   fi


   set -- ${entry}


   if [ "$1x" = "x" ] ||
      [ "$2x" = "x" ] ||
      [ "$3x" = "x" ] ; then
      continue
   fi


   if [ "$1" = "--" ] && [ "$2" = "Submittor:" ] ; then
      continue
   fi


   case "$1" in


     MyType )
        if [ ${arch_os_match} -eq 1 ] ; then
            outputQueueEntry
        fi
        arch_os_match=0
        ;;


     JobStatus )
        case $3 in
           0 ) jobstatus=PENDING ;;
           1 ) jobstatus=PENDING ;;
           2 ) jobstatus=ACTIVE ;;
           3 ) jobstatus=FAILED ;;
           4 ) jobstatus=DONE ;;
           5 ) jobstatus=SUSPENDED ;;
           6 ) jobstatus=FAILED ;;
           * ) jobstatus=UNKNOWN ;;
        esac ;;


      ClusterId ) clusterid=$3 ;;


      ProcId )  procid=$3 ;;


      MaxHosts )  count=$3 ;;


      Owner ) owner=`echo $3 | ${awk} '{print substr($1,2,length($1)-2); }'` ;;


      Requirements )
          test_os=`echo "${entry}" | ${grep} -i "OpSys == \"${condor_os}\""`
          test_arch=`echo "${entry}" | ${grep} -i "Arch == \"${condor_arch}\""`
          if [ -n "${test_os}" ] &&
             [ -n "${test_arch}" ] ; then
             arch_os_match=1
          fi ;;


      * ) continue ;;


   esac
       
done

if [ ${arch_os_match} -eq 1 ] ; then
    outputQueueEntry
fi

rm -f "${tmp_file}"

$DEBUG_ECHO "JM_SCRIPT: exiting gram_script_condor_queue_state"
