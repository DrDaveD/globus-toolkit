#! /bin/sh -f

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

#
# Globus Job Manager prun/preserve interface script for submitting jobs
# Author:               Alexander Adams (TU Delft)
# Last Modified:        9/8/98
#
# Known problems:
#	Jobs with a very short execution time will return failed even
#	though they completed successfully.
#

################################################
# Site-specific settings
################################################
preserve=${GLOBUS_GRAM_JOB_MANAGER_PRESERVE-preserve}
prun=${GLOBUS_GRAM_JOB_MANAGER_PRUN-prun}
ps=${GLOBUS_SH_PS-ps}
awk=${GLOBUS_SH_AWK-awk}
rm=${GLOBUS_SH_RM-rm}
grep=${GLOBUS_SH_GREP-grep}
################################################

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi
 
# use the argument file to define all the arguments
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO "JM_SCRIPT: in gram_script_prun_submit">> $grami_logfile


$DEBUG_ECHO "JM_SCRIPT: testing maxtime">> $grami_logfile
if [ $grami_max_time -eq 0 ] ; then
    $DEBUG_ECHO "JM_SCRIPT: no maxtime specified, using default 900 sec.">>$grami_logfile
    grami_max_time="900"
fi

if [ -z "${grami_directory}" ] ; then
    $DEBUG_ECHO "JM_SCRIPT: no directory specified, using home">>$grami_logfile
    grami_directory="~"
fi
$DEBUG_ECHO "JM_SCRIPT: checking if directory exists -- ${grami_directory}">> $grami_logfile
if [ -d ${grami_directory} ] ; then
    $DEBUG_ECHO "JM_SCRIPT: directory exists!!">> $grami_logfile
    cd ${grami_directory}
else
   $DEBUG_ECHO "JM_SCRIPT: directory does not exists!!"\
               " But change dir anyway">> $grami_logfile
    cd ${grami_directory}
fi
$DEBUG_ECHO "JM_SCRIPT: checking redirection of stdout">> $grami_logfile
if [ -z "${grami_stdout}" ] ; then
    $DEBUG_ECHO "JM_SCRIPT: stdout not redirected" >> $grami_logfile
    stdout_switch=""
else
    $DEBUG_ECHO "JM_SCRIPT: stdout redirected to ${grami_stdout}" >> $grami_logfile
    stdout_switch=`echo "-o" ${grami_stdout}`
fi
$DEBUG_ECHO "JM_SCRIPT: checking redirection of stdin">> $grami_logfile
if [ -z "${grami_stdin}" ] ; then
    $DEBUG_ECHO "JM_SCRIPT: stdin not redirected" >> $grami_logfile
    grami_stdin="/dev/null"
else
    $DEBUG_ECHO "JM_SCRIPT: stdin redirected to ${grami_stdin}" >> $grami_logfile
fi
$DEBUG_ECHO "JM_SCRIPT: checking environment">> $grami_logfile

if [ ! -z "${grami_env}" ] ; then
   eval set -- ${grami_env}
   x=0
   while [ ! -z "$1" ]; do
      if [ $x = 0 ] ; then
         new_grami_env="${new_grami_env}$1"
         x=1
      else
        x=0
        new_grami_env="${new_grami_env}=$1 "
      fi
      shift
   done
fi

$DEBUG_ECHO "JM_SCRIPT: prun environment = "\
            "${new_grami_env}" >> $grami_logfile

$DEBUG_ECHO "" >> $grami_logfile
$DEBUG_ECHO ======================================== >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: arguments recieved... ">> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: logfile   =" $grami_logfile >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: directory =" $grami_directory >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: program   =" $grami_program >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: args      =" $grami_args >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: env       =" $grami_env >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: count     =" $grami_count >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdin     =" $grami_stdin >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdout    =" $grami_stdout >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stderr    =" $grami_stderr >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: maxtime   =" $grami_max_time >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: jobtype   =" $grami_job_type >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: myjob     =" $grami_myjob >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: progtype  =" $sp_progtype >> $grami_logfile
$DEBUG_ECHO "" >> $grami_logfile

# reserve the requested number of processors and get the reservation number.
# We need this number in case we want to kill the job.
# The line looks like this "Reservation number 1023:"
# and is the first line of output.

$DEBUG_ECHO "JM_SCRIPT: executing preserve" >> $grami_logfile

res_stat_1=`${preserve} -# ${grami_count} -t ${grami_max_time}`

$DEBUG_ECHO "JM_SCRIPT: reservation status:" >> $grami_logfile
$DEBUG_ECHO "${res_stat_1}" >> $grami_logfile
$DEBUG_ECHO "" >> $grami_logfile

res_stat_2=`echo "${res_stat_1}" | ${awk} '/number/, /:/'`
res_status=`echo "${res_stat_2}" | ${awk} '{print $3}' | ${awk} -F: '{print $1; exit;}'`

if [ -z "${res_status}" ] ; then
   $DEBUG_ECHO "##############################" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: unknown response from preserve!"\
               >> $grami_logfile
   $DEBUG_ECHO "##############################" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED"
else
   prun_err_file="${local_tmpdir}/prun${res_status}.err"
   $DEBUG_ECHO "JM_SCRIPT: creating prun error log file ${prun_err_file}" >> $grami_logfile
   ${rm} -f $prun_err_file
   :>$prun_err_file
   $DEBUG_ECHO "JM_SCRIPT: executing prun" >> $grami_logfile

   ${prun} -reserve ${res_status} -c ${grami_directory} ${stdout_switch} ${new_grami_env} ${grami_program} ${grami_count} ${grami_args} < ${grami_stdin} >/dev/null 2>$prun_err_file & 

   # I'm not very happy about using ps here, but how else can we find out
   # when the job has finished?

  status=`${ps} -ax`
  status=`echo "${status}" | ${grep} "prun -reserve ${res_status}" | ${awk} '{print $1}'`

  if [ -z "${status}" ] ; then
      $DEBUG_ECHO "##############################" >> $grami_logfile
      $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
                  "$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED" >> $grami_logfile
      $DEBUG_ECHO "JM_SCRIPT: job NOT submitted successfully!"\
                  >> $grami_logfile
      $DEBUG_ECHO "JM_SCRIPT: cancelling reservation ${res_status}" >> $grami_logfile
      dummy=`${preserve} -c ${res_status}`
      $DEBUG_ECHO "##############################" >> $grami_logfile
      rm -f $prun_err_file
      echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED"
   else
      $DEBUG_ECHO "JM_SCRIPT: prun PID="${status} >> $grami_logfile
      $DEBUG_ECHO "JM_SCRIPT: returning job state: "\
                  "$GLOBUS_GRAM_PROTCOL_JOB_STATE_PENDING" >> $grami_logfile

      ret_status=`echo "${res_status}:${status}"`

      # write the job_id to the argument file.  This is used by any subsequent
      # grami_jm_shell routines.  I.E. gram_script_*_poll gram_script_*_rm
      echo "grami_job_id=\"$ret_status\"" >> $arg_file
      $DEBUG_ECHO "JM_SCRIPT: grami_job_id=${ret_status}" >> $grami_logfile

      echo "GRAM_SCRIPT_SUCCESS:$GLOBUS_GRAM_PROTCOL_JOB_STATE_PENDING"
  fi
fi

$DEBUG_ECHO "JM_SCRIPT: exiting gram_script_prun_submit" >> $grami_logfile
