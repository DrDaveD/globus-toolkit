#! /bin/sh -f

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

################################################
# Site-specific settings
################################################
glurun=${GLOBUS_GRAM_JOB_MANAGER_GLURUN-glurun}
grep=${GLOBUS_SH_GREP-grep}
awk=${GLOBUS_SH_AWK-awk}
printenv=${GLOBUS_GRAM_JOB_MANAGER_PRINTENV-printenv}
GLUNIX_NODES=npaci
export GLUNIX_NODES

################################################

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi
 
# use the argument file to define all the arguments
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=${GLOBUS_SH_ECHO-echo}
fi

$DEBUG_ECHO "JM_SCRIPT: in glunix_submit">> $grami_logfile

#
#loop through all the environment variables.  Variables and values are seperate
#arguments.  While assembling var/value pairs add the specific syntax
#required for this scheduling system.
#
$DEBUG_ECHO "JM_SCRIPT: getting environment variable">> $grami_logfile

#unset any environment variables
unsettable_vars=`$printenv | cut -d= -f1`
for i in $unsettable_vars"" ; do
  if [ -n "$i" -a "$i" != "PATH" -a "$i" != "PS1" ]; then
      $DEBUG_ECHO "JM_SCRIPT: unsetting environment variable $i">> $grami_logfile
      unset $i;
  fi
done

# set only the ones we are given
new_grami_env=""
if [ ! -z "${grami_env}" ] ; then
   eval set -- ${grami_env}
   x=0
   while [ "$#" -ne 0 ]; do
       eval "$1=$2"
       export $1
       shift
       shift
   done
fi


$DEBUG_ECHO "JM_SCRIPT: testing jobtype" >> $grami_logfile
if [ $grami_job_type = "0" ] ; then
    :
elif [ $grami_job_type = "1" ] ; then
    grami_count=1
elif [ $grami_job_type = "2" ] ; then
    :
elif [ $grami_job_type = "3" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: ERROR: jobtype parameter not supported "
               >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_JOBTYPE_NOT_SUPPORTED"
   exit 1
else
   $DEBUG_ECHO "JM_SCRIPT: invalid jobtype parameter, exiting with 1"
               >> $grami_logfile
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_INVALID_JOBTYPE
   exit 1
fi

$DEBUG_ECHO "JM_SCRIPT: ignoring maxtime">> $grami_logfile

$DEBUG_ECHO "JM_SCRIPT: checking if directory exists -- ${grami_directory}">> $grami_logfile
if [ -d ${grami_directory} ] ; then
   $DEBUG_ECHO "JM_SCRIPT: directory exists!!">> $grami_logfile
   cd ${grami_directory}
else
   $DEBUG_ECHO "JM_SCRIPT: directory does not exists!!"\
               " But change dir anyway">> $grami_logfile
   cd ${grami_directory}
fi

$DEBUG_ECHO "" >> $grami_logfile
$DEBUG_ECHO ======================================== >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: arguments recieved... ">> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: logfile      =" ${grami_logfile} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: directory    =" ${grami_directory} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: program      =" ${grami_program} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: args         =" ${grami_args} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: env          =" ${grami_env} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: count        =" ${grami_count} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdin        =" ${grami_stdin} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdout       =" ${grami_stdout} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stderr       =" ${grami_stderr} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: maxtime      =" ${grami_max_time} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: jobtype      =" ${grami_job_type} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: myjob        =" ${grami_myjob} >> $grami_logfile
$DEBUG_ECHO "" >> $grami_logfile

if [ "$grami_count" -gt 32 ]; then
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED"
   exit;
fi

$DEBUG_ECHO "JM_SCRIPT: executing glurun command" >> $grami_logfile
eval set -- ${grami_args}
$glurun -${grami_count} ${grami_program} "$@" <${grami_stdin} 1>${grami_stdout} 2>${grami_stderr} &
status=$!
ps -fp $status

if test -n "${status}"; then
   $DEBUG_ECHO "JM_SCRIPT: returning job state: "\
               "1" >> $grami_logfile
   echo "GRAM_SCRIPT_JOB_ID:$status"
   echo "GRAM_SCRIPT_SUCCESS:$GLOBUS_GRAM_PROTCOL_JOB_STATE_PENDING"
else
   $DEBUG_ECHO "##############################" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: unknown response from glurun!" >> $grami_logfile
   $DEBUG_ECHO "##############################" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTCOL_ERROR_JOB_EXECUTION_FAILED"
fi

# write the job_id to the argument file.  This is used by any subsequent
# grami_jm_shell routines.  I.E. gram_script_*_poll gram_script_*_rm
echo "grami_job_id=\"$status\"" >> $arg_file

$DEBUG_ECHO "JM_SCRIPT: exiting glunix_submit" >> $grami_logfile
