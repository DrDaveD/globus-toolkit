#! /bin/sh

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

################################################
# Site-specific settings
################################################
spsubmit=${GLOBUS_GRAM_JOB_MANAGER_SPSUBMIT-spsubmit}
grep=${GLOBUS_SH_GREP-grep}
awk=${GLOBUS_SH_AWK-awk}

#spsubmit calls llsubmit which if running out of inetd is not in our path.
#So, we use the path to the llsubmit command and append it to the path.
llcmd=${GLOBUS_GRAM_JOB_MANAGER_LLSUBMIT-llsubmit}
# strip off everything from the end of the path until a slash is found
llpath=`echo $llcmd | ${GLOBUS_SH_SED-sed} -e 's:/[^/]*$::'`
PATH=${PATH}:$llpath; export PATH
################################################

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi
 
# use the argument file to define all the arguments
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO "JM_SCRIPT: in easymcs_submit">> $grami_logfile

#
#loop through all the environment variables.  Variables and values are seperate
#arguments.  While assembling var/value pairs add the specific syntax
#required for this scheduling system.
#
$DEBUG_ECHO "JM_SCRIPT: getting environment variable">> $grami_logfile
new_grami_env=""
if [ ! -z "${grami_env}" ] ; then
   eval set -- ${grami_env}
   x=0
   while [ "$#" -ne 0 ]; do
       if [ $x = 0 ] ; then
          new_grami_env="${new_grami_env}-env '$1'"
          x=1
       else
          x=0
          new_grami_env="${new_grami_env}='$1' "
       fi
 
       shift
   done
fi

# 4 jobtypes exist               easymcs progtype
# -----------------              -------------------
# jobtype 0 = mpi        ----->  M
# jobtype 1 = single     ----->  S
# jobtype 2 = multiple   ----->  N
# jobtype 3 = condor     ----->  ERROR
#
$DEBUG_ECHO "JM_SCRIPT: testing jobtype" >> $grami_logfile
if [ $grami_job_type = "0" ] ; then
    sp_progtype="M"
elif [ $grami_job_type = "1" ] ; then
    sp_progtype="S"
elif [ $grami_job_type = "2" ] ; then
    sp_progtype="N"
elif [ $grami_job_type = "3" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: ERROR: jobtype parameter not supported "
               >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_JOBTYPE_NOT_SUPPORTED"
   exit 1
else
   $DEBUG_ECHO "JM_SCRIPT: invalid jobtype parameter, exiting with 1"
               >> $grami_logfile
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_INVALID_JOBTYPE
   exit 1
fi

new_grami_args="${grami_args}"

if [ ${sp_progtype} != "S" ] ; then
   # Handle single quote escaping
   new_grami_args=`echo "${new_grami_args}" | ${GLOBUS_SH_SED-sed} -e "s/'/'\\\\\"'\\\\\"'/g"`
   new_grami_args=`echo "${new_grami_args}" | ${GLOBUS_SH_SED-sed} -e "s/'/'\\\\\"'\\\\\"'/g"`
   # Handle \ escaping
   new_grami_args=`echo "${new_grami_args}" | ${GLOBUS_SH_SED-sed} -e "s/\\\\\\\\\\\\\/\\\\\/g"`
   # Handle $ escaping
   new_grami_args=`echo "${new_grami_args}" | ${GLOBUS_SH_SED-sed} -e "s/\\\\\\\\\\\\$/$/g"`
fi


$DEBUG_ECHO "JM_SCRIPT: testing maxtime">> $grami_logfile
if [ $grami_max_time -eq 0 ] ; then
    grami_max_time=""
else
    grami_max_time="-maxtime $grami_max_time"
fi

$DEBUG_ECHO "JM_SCRIPT: checking if directory exists -- ${grami_directory}">> $grami_logfile
if [ -d ${grami_directory} ] ; then
   $DEBUG_ECHO "JM_SCRIPT: directory exists!!">> $grami_logfile
   cd ${grami_directory}
else
   $DEBUG_ECHO "JM_SCRIPT: directory does not exists!!"\
               " But change dir anyway">> $grami_logfile
   cd ${grami_directory}
fi

$DEBUG_ECHO "" >> $grami_logfile
$DEBUG_ECHO ======================================== >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: arguments recieved... ">> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: logfile      =" ${grami_logfile} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: directory    =" ${grami_directory} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: program      =" ${grami_program} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: args         =" ${grami_args} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: easymcs args =" ${new_grami_args} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: env          =" ${grami_env} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: easymcs env  =" ${new_grami_env} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: count        =" ${grami_count} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdin        =" ${grami_stdin} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stdout       =" ${grami_stdout} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: stderr       =" ${grami_stderr} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: maxtime      =" ${grami_max_time} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: jobtype      =" ${grami_job_type} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: myjob        =" ${grami_myjob} >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: progtype     =" ${sp_progtype} >> $grami_logfile
$DEBUG_ECHO "" >> $grami_logfile

$DEBUG_ECHO "JM_SCRIPT: executing spsubmit command" >> $grami_logfile

if [ ${sp_progtype} != "S" ] ; then
   status=`eval "${spsubmit} -np ${grami_count} ${new_grami_env} \
         -progtype ${sp_progtype} -nomail \
         -stdin ${grami_stdin} -stdout ${grami_stdout} \
         -stderr ${grami_stderr} ${grami_max_time} ${grami_program} \
         \\''${new_grami_args}'\\' "</dev/null 2>/dev/null \
         | head -1 | ${grep}  '^[^\.]*\.[0-9][0-9]*\.[0-9][0-9]*$'`
else
   status=`${spsubmit} -np ${grami_count} ${new_grami_env} \
         -progtype ${sp_progtype} -nomail \
         -stdin ${grami_stdin} -stdout ${grami_stdout} \
         -stderr ${grami_stderr} ${grami_max_time} ${grami_program} \
         ${new_grami_args} </dev/null 2>/dev/null \
         | head -1 | ${grep}  '^[^\.]*\.[0-9][0-9]*\.[0-9][0-9]*$'`
fi

if test -n "${status}"; then
   $DEBUG_ECHO "JM_SCRIPT: returning job state: "\
               "$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING" >> $grami_logfile
   echo "GRAM_SCRIPT_JOB_ID:$status"
   echo "GRAM_SCRIPT_SUCCESS:$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING"
else
   $DEBUG_ECHO "##############################" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "$GLOBUS_GRAM_PROTOCOL_ERROR_JOB_EXECUTION_FAILED" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: unknown response from spsubmit!" >> $grami_logfile
   $DEBUG_ECHO "##############################" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_JOB_EXECUTION_FAILED"
fi

# write the job_id to the argument file.  This is used by any subsequent
# grami_jm_shell routines.  I.E. gram_script_*_poll gram_script_*_rm
echo "grami_job_id=\"$status\"" >> $arg_file

$DEBUG_ECHO "JM_SCRIPT: exiting easymcs_submit" >> $grami_logfile
