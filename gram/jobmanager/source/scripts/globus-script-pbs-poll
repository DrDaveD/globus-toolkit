#! /bin/sh -f

# Globus Job Manager PBS interface script for reporting job status
# Author:               Doru Marcusiu (NCSA)
# Last Modified:        6/24/98
#
# This script uses information obtained from a file passed as the
# script's argument. This file contains a list of environment variables
# which are set by way of "sourcing" the file from this script. One of
# the evironment variables set as a result of this action is then used
# to obtain the job id for which status is requested. Once the job id
# is determined the PBS qstat command is used to obtain the current
# status of the job. This status is then returned.
#
# The Status field can contain one of the following strings:
#
# string	stands for			Globus context meaning
# --------------------------------------------------------------------
# Q		Queued				PENDING
# S		Suspended (Unicos only)		SUSPENDED
# W		Waiting for delayed exection  	PENDING
# H		Held 				SUSPENDED
# T		Being moved to new location	PENDING
# R		Running 			ACTIVE
# E		Exiting after having run	ACTIVE
#
# There are no states which indicate any type of failure.
# Once the job has completed information about it is no longer available.
# Therefore, the job will be considered completed.

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

qstat=${GLOBUS_GRAM_JOB_MANAGER_QSTAT-qstat}
grep=${GLOBUS_SH_GREP-grep}
awk=${GLOBUS_SH_AWK-awk}


arg_file=$1

        # Check for the argument file. If it does not exist
        # then return with an error immediately

if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi

        # Source the argument file to set environment variables
        # defining all the job arguments

. $arg_file

        # If a logfile name has been defined then activate debug mode

if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO in gram_script_pbs_poll >> $grami_logfile
$DEBUG_ECHO executing qstat with job id $grami_job_id >> $grami_logfile

	# Obtain job status from PBS qstat command

status=`${qstat} $grami_job_id | ${grep} $grami_job_id | ${awk} '{print $5}'`

case $status in
     "Q") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING;;
     "S") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_SUSPENDED;;
     "W") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING;;
     "H") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_SUSPENDED;;
     "T") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING;;
     "R") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE;;
     "E") gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE;;
       *) gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE;;
esac

	# Return appropriate job status

$DEBUG_ECHO "returning success, job state: $gram_job_state" >> $grami_logfile
echo "GRAM_SCRIPT_SUCCESS:$gram_job_state"

$DEBUG_ECHO "exiting gram_script_pbs_poll\n\n" >> $grami_logfile

exit
