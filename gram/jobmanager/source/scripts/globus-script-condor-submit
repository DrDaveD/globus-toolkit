#! /bin/sh

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

####################################################
# This script will submit a condor request and return information to the GRAM
# job manager about success/failure and status/error code
#
# The following steps are done by the system administrator
#

################################################
# Site-specific settings
################################################
condor_submit=${GLOBUS_GRAM_JOB_MANAGER_CONDOR_SUBMIT-condor_submit}
grep=${GLOBUS_SH_GREP-grep}
cat=${GLOBUS_SH_CAT-cat}
awk=${GLOBUS_SH_AWK-awk}
rm=${GLOBUS_SH_RM-rm}
cut=${GLOBUS_SH_CUT-cut}
sed=${GLOBUS_SH_SED-sed}
################################################

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi

# use the argument file to define all the arguments
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO "JM_SCRIPT: in condor submit script" >> $grami_logfile

$DEBUG_ECHO ""                                            >> $grami_logfile
$DEBUG_ECHO ============================================  >> $grami_logfile
$DEBUG_ECHO "JM_SCRIPT: ====argument file contents===="   >> $grami_logfile
if [ "$DEBUG_ECHO" = "echo" ] ; then
   $cat $arg_file                                         >> $grami_logfile
fi
$DEBUG_ECHO "JM_SCRIPT: ====argument file contents===="   >> $grami_logfile
$DEBUG_ECHO ""                                            >> $grami_logfile


# 4 jobtypes exist               condor jobtype
# -----------------              -------------------
# jobtype 0 = mpi        ----->  ERROR
# jobtype 1 = single     ----->  set universe to vanilla
# jobtype 2 = multiple   ----->  set universe to vanilla
# jobtype 3 = condor     ----->  set universe to condor
$DEBUG_ECHO "JM_SCRIPT: testing jobtype" >> $grami_logfile
if [ $grami_job_type = "0" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: error: jobtype MPI not supported " >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_JOBTYPE_NOT_SUPPORTED"
   exit 1
elif [ $grami_job_type = "1" ] ; then
    condor_universe="vanilla"
elif [ $grami_job_type = "2" ] ; then
    condor_universe="vanilla"
elif [ $grami_job_type = "3" ] ; then
    condor_universe="standard"
else
   $DEBUG_ECHO "JM_SCRIPT: error: invalid jobtype parameter" >> $grami_logfile
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_INVALID_JOBTYPE
   exit 1
fi

if [ -z "${grami_condor_arch}" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: error: condor arch parameter undefined" \
       >> $grami_logfile
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_CONDOR_ARCH
   exit 1
fi

if [ -z "${grami_condor_os}" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: error: condor os parameter undefined" \
       >> $grami_logfile
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_CONDOR_OS
   exit 1
fi


createScript () {
    #
    # creates a condor script.
    #
    #
    echo "####################"
    echo "#"
    echo "# description file for condor submision"
    echo "#"
    echo "####################"
    echo ""
    echo "Universe       = ${condor_universe}"
    echo ""
    echo "Notification   = Never"
    eval echo "Executable     = ${grami_program}"
    requirements="OpSys == \"${grami_condor_os}\""
    requirements="${requirements} && Arch == \"${grami_condor_arch}\""
    if [ ${grami_min_memory} -ne 0 ] ; then
       requirements="${requirements} && Memory >= ${grami_min_memory}"
       echo "rank = Memory"
    fi
    if [ "${condor_universe}" = "vanilla" -a \
         "${grami_stdin}" = "/dev/null" -a \
	 "${grami_stdout}" = "/dev/null" -a \
	 "${grami_stderr}" = "/dev/null" ] ; then
       requirements="${requirements} && FileSystemDomain != \"xxx\""
    fi
    echo "Requirements  = ${requirements}"

    if test -n "${grami_args}"; then
       eval echo "Arguments      = ${grami_args}"
    fi

    if test -n "${new_grami_env}"; then
       echo "Environment    = ${new_grami_env}"
    fi
    echo ""
    eval echo "Initialdir = ${grami_directory}"
    eval echo "Input = ${grami_stdin}"
    eval echo "Output = ${grami_stdout}"
    eval echo "Error = ${grami_stderr}"
    echo "Log = ${grami_condor_ulog}"
    echo ""
    echo "queue ${grami_count}"
    echo ""
}

#in the standard universe directories and files refer to the local machine
#so we can verify them.  If the universe is vanilla then directories and files
#refer to the remote machine (i.e. some machine at U of Wisc)
if [ ${condor_universe} = "standard" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: verifying directory exists">> $grami_logfile
   if [ -d ${grami_directory} ] ; then
      cd ${grami_directory}
   else
      $DEBUG_ECHO "JM_SCRIPT: directory DOES NOT exist, exiting with 1"\
               >> $grami_logfile
      echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_BAD_DIRECTORY"
      exit
   fi

   $DEBUG_ECHO "JM_SCRIPT: verifying stdin">> $grami_logfile
   if [ ! -r ${grami_stdin} ] ; then
       #stdin file is not readable by this process
      echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_STDIN_NOT_FOUND"
      exit
   fi
fi

$DEBUG_ECHO "JM_SCRIPT: checking environment">> $grami_logfile
new_grami_env=""

#
#loop through all the environment variables.  Variables and values are seperate
#arguments.  While assembling var/value pairs add the specific syntax 
#required for this scheduling system.
#
if [ ! -z "${grami_env}" ] ; then
   eval set -- ${grami_env}
   x=0
   while [ "$#" -ne 0 ]; do
       if [ $x = 0 ] ; then
          new_grami_env="${new_grami_env}$1"
          x=1
       else
          x=0
          new_grami_env="${new_grami_env}=$1;"
       fi

       shift
   done
fi

$DEBUG_ECHO "JM_SCRIPT: condor environment = "\
                "${new_grami_env}" >> $grami_logfile

grami_condor_ulog=${tmpdir}/condor_log.${grami_uniq_id}

condor_file=${local_tmpdir}/condor_script.description.$$
createScript >$condor_file

$DEBUG_ECHO "JM_SCRIPT: testing successful creation of the submit"\
            " description file created.">> $grami_logfile
#
#test if the file exists and is writable.
if [ ! -w "${condor_file}" ] ; then
   $DEBUG_ECHO "JM_SCRIPT: creation of the submit description file "\
               "${condor_file} FAILED" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_TEMP_SCRIPT_FILE_FAILED"
fi

#
#  grep for Proc line which will contain the ID that the calling 
#  program requires in order to cancel the job.
#
#  the proc line will look like this "Proc 45.0:"
#  we want to return "45" from this line.
#
out_file=${condor_file}".out"
err_file=${condor_file}".err"
${condor_submit} $condor_file 1> ${out_file} 2> ${err_file}

if [ "$?" -eq "0" ]; then
   status=`$cat $out_file | ${grep} "submitted to cluster" | ${awk} '{print $6}' | ${awk} -F. '{print $1; exit;}'`

   $DEBUG_ECHO "JM_SCRIPT: returning job state: "\
               "$GLOBUS_GRAM_CLIENT_JOB_STATE_PENDING" >> $grami_logfile
   echo "GRAM_SCRIPT_JOB_ID:$status"
   echo "GRAM_SCRIPT_SUCCESS:$GLOBUS_GRAM_CLIENT_JOB_STATE_PENDING"
else
   $DEBUG_ECHO "##############################" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: returning script error: "\
               "$GLOBUS_GRAM_CLIENT_ERROR_JOB_EXECUTION_FAILED" >> $grami_logfile
   $DEBUG_ECHO "JM_SCRIPT: unknown response from condor_submit!"\
               >> $grami_logfile
   $DEBUG_ECHO "##############################" >> $grami_logfile
   echo "GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_CLIENT_ERROR_JOB_EXECUTION_FAILED"
   echo ""                                                   >> ${grami_stderr}
   echo "-------- output from scheduler submission --------" >> ${grami_stderr}
   cat ${err_file}                                           >> ${grami_stderr}
   echo "--------------------------------------------------" >> ${grami_stderr}
   echo ""                                                   >> ${grami_stderr}

fi

${rm} ${condor_file} ${out_file} ${err_file}

# write the job_id to the argument file.  This is used by any subsequent
# grami_jm_shell routines.  I.E. condor poll script -or- condor rm script
echo "grami_job_id=\"$status\"" >> $arg_file

$DEBUG_ECHO "JM_SCRIPT: exiting condor submit script" >> $grami_logfile
