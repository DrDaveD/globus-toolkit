#! /bin/sh

. ${GLOBUS_LOCATION}/libexec/globus-script-initializer

globus_source ${libexecdir}/globus-gram-protocol-constants.sh
globus_source ${libexecdir}/globus-sh-tools.sh
globus_source ${libexecdir}/globus-gram-job-manager-tools.sh

#
# Globus Job Manager prun/preserve interface script for reporting job status
# Author:               Alexander Adams (TU Delft)
# Last Modified:        9/8/98
#
#

################################################
# Site-specific settings
################################################
preserve=${GLOBUS_GRAM_JOB_MANAGER_PRESERVE-preserve}
ps=${GLOBUS_SH_PS-ps}
awk=${GLOBUS_SH_AWK-awk}
grep=${GLOBUS_SH_GREP-grep}
rm=${GLOBUS_SH_RM-rm}
################################################  

arg_file=$1
# check for the argument file if it does not exist
# then return with an error immediately.
if [ ! -f $arg_file ] ; then
   echo GRAM_SCRIPT_ERROR:$GLOBUS_GRAM_PROTOCOL_ERROR_BAD_SCRIPT_ARG_FILE
   exit 1
fi

# use the argument file to define all the arguments.
# Of special interest here is the grami_job_id parameter.
. $arg_file

# if a logfile has been passed in then assume debug mode.
if [ $grami_logfile = "/dev/null" ] ; then
    DEBUG_ECHO=:
else
    DEBUG_ECHO=echo
fi

$DEBUG_ECHO "JM_SCRIPT: in gram_script_prun_poll" >> $grami_logfile

res_id=`echo ${grami_job_id} | ${awk} '-F:' '{print $1}'`
ps_id=`echo ${grami_job_id} | ${awk} '-F:' '{print $2}'`

$DEBUG_ECHO "JM_SCRIPT: looking for prun with reservation number:pid ${res_id}:${ps_id}" >> $grami_logfile

gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_DONE	# assume done

prun_id=`${ps} -ax`
prun_id=`echo "${prun_id}" | grep "prun -reserve ${res_id}" | awk '{print $1}'`

# if prun is still running set job state to active

if [ ${prun_id} -eq ${ps_id} ] ; then

   state=`${preserve} -list | ${grep} -w ${res_id} | ${awk} '{print $6}'`
   $DEBUG_ECHO "JM_SCRIPT: state according to preserve: ${state}" >> $grami_logfile

   # are other states other than waiting and running possible?
   if [ ${state} = "waiting" ] ; then
       $DEBUG_ECHO "JM_SCRIPT: setting job state to pending" >> $grami_logfile
       gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_PENDING
   else
       $DEBUG_ECHO "JM_SCRIPT: setting job state to active" >> $grami_logfile
       gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_ACTIVE
   fi
else
   $DEBUG_ECHO "JM_SCRIPT: prun id and ps id not equal" >> $grami_logfile

   if [ ! -z ${prun_id} ]; then	  # probably not possible but just in case...
      $DEBUG_ECHO "JM_SCRIPT: bad prun id ${prun_id}" >> $grami_logfile
      $DEBUG_ECHO "JM_SCRIPT: setting job state to failed" >> $grami_logfile
      gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED
   fi  
fi

prun_err_file="${local_tmpdir}/prun${res_id}.err"

$DEBUG_ECHO "JM_SCRIPT: checking error file ${prun_err_file}" >> $grami_logfile
if [ -s $prun_err_file ] ; then

    $DEBUG_ECHO "JM_SCRIPT: error file contains the following message:" >> $grami_logfile
    cat $prun_err_file >> $grami_logfile

    $DEBUG_ECHO "JM_SCRIPT: setting job state to failed" >> $grami_logfile
    gram_job_state=$GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED
fi

# As the reservation will continue to exist, even when the job has finished,
# we will have to clean it up here.

if [ ${gram_job_state} -ne 1 -a ${gram_job_state} -ne 2 ]; then
  $DEBUG_ECHO "JM_SCRIPT: cancelling reservation" >> $grami_logfile
  ${preserve} -c ${res_id} >/dev/null
  $DEBUG_ECHO "JM_SCRIPT: removing prun error file ${prun_err_file}" >> $grami_logfile
  ${rm} -f $prun_err_file
fi

$DEBUG_ECHO "JM_SCRIPT: returning success, job state:${gram_job_state}" >> $grami_logfile

echo "GRAM_SCRIPT_SUCCESS:${gram_job_state}"

$DEBUG_ECHO "JM_SCRIPT: exiting gram_script_prun_poll" >> $grami_logfile
