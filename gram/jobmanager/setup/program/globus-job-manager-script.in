#! @PERL@

BEGIN
{
    use Config;
    my $path = $ENV{GLOBUS_LOCATION} . '/lib';

    push(@INC, "@GLOBUS_LOCATION@/lib/perl");
    $ENV{GLOBUS_LOCATION} =
        "@GLOBUS_LOCATION@" if(!exists($ENV{GLOBUS_LOCATION}));

    if($Config{osname} eq 'irix')
    {

	&append_path(\%ENV, 'LD_LIBRARY64_PATH', $path);
	&append_path(\%ENV, 'LD_LIBRARYN32PATH', $path);
    }
    &append_path(\%ENV, 'LD_LIBRARY_PATH', $path);
}

use Getopt::Long;
use Globus::GRAM::Error;
use Globus::GRAM::JobDescription;

my($manager_name, $argument_file, $command) = (undef, undef, undef);

GetOptions('manager-name|m=s' => \$manager_name,
           'argument-file|f=s' => \$argument_file,
	   'command|c=s' => \$command);
STDOUT->autoflush();

if((!defined($manager_name)) ||
   (!defined($argument_file)) ||
   (!defined($command)))
{
    &fail(Globus::GRAM::Error::BAD_SCRIPT_ARG_FILE);
}

my $manager_class = "Globus::GRAM::JobManager::$manager_name";
my $job_description = new Globus::GRAM::JobDescription($argument_file);

eval "require $manager_class";

$manager = new $manager_class($job_description) or
    &fail(Globus::GRAM::Error::BAD_SCRIPT_ARG_FILE);

# If we are submitting a job, we may need to update things like
# executable & stdin to look in the cache.
if($command eq 'submit')
{
    $manager->rewrite_urls();
}
$result = $manager->$command();

if(UNIVERSAL::isa($result, 'Globus::GRAM::Error'))
{
    &fail($result);
}
else
{
    $manager->respond($result);
}

sub fail
{
    my $error = shift;

    print "GRAM_SCRIPT_ERROR:" . $error->value() . "\n";
    exit 1;
}

sub append_path
{
    my $ref = shift;
    my $var = shift;
    my $path = shift;

    if(exists($ref->{$var}))
    {
	$ref->{$var} .= ":$path";
    }
    else
    {
	$ref->{$var} = $path;
    }
}
