# Globus::GRAM::JobManager::condor package
#
# CVS Information:
# $Source$
# $Date$
# $Revision$
# $Author$

use Globus::GRAM::Error;
use Globus::GRAM::JobState;
use Globus::GRAM::JobManager;
use Globus::Core::Paths;

use Config;

package Globus::GRAM::JobManager::condor;

@ISA = qw(Globus::GRAM::JobManager);

my ($condor_submit, $condor_rm);

BEGIN
{
    $condor_submit 	= '@CONDOR_SUBMIT@';
    $condor_rm	 	= '@CONDOR_RM@';
}

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    my $log_dir;

    if(! exists($ENV{GLOBUS_SPOOL_DIR}))
    {
        $log_dir = $Globus::Core::Paths::tmpdir;
    }
    else
    {
        $log_dir = $ENV{GLOBUS_SPOOL_DIR};
    }

    $self->{condor_logfile} = "$log_dir/gram_condor_log."
			    . $self->{JobDescription}->uniq_id();

    bless $self, $class;
    return $self;
}

sub submit
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my @environment;
    my $environment_string;
    my $tag = $description->cache_tag() or $tag = $ENV{GLOBUS_GRAM_JOB_CONTACT};
    my $cache_pgm = "$Globus::Core::Paths::bindir/globus-gass-cache";
    my $script_url;
    my $script_filename;
    my $script_file;
    my $requirements = '';
    my $rank = '';
    my @arguments;
    my $argument_string;
    my %library_vars;
    my @response_text;
    my @submit_attrs;
    my $submit_attrs_string;

    if($description->jobtype() eq 'single' ||
       $description->jobtype() eq 'multiple')
    {
	$universe = 'vanilla';
    }
    elsif($description->jobtype() eq 'condor')
    {
	$universe = 'standard'
    }
    else
    {
	return Globus::GRAM::Error::JOBTYPE_NOT_SUPPORTED();
    }

    # Validate some RSL parameters
    if(!defined($description->directory()))
    {
        return Globus::GRAM::Error::RSL_DIRECTORY;
    }
    elsif( $description->stdin() eq '')
    {
	return Globus::GRAM::Error::RSL_STDIN;
    }
    elsif(ref($description->count()) ||
       $description->count() != int($description->count()))
    {
	return Globus::GRAM::Error::INVALID_COUNT();
    }
    elsif( $description->executable eq '')
    {
	return Globus::GRAM::Error::RSL_EXECUTABLE();
    }

    # In the standard universe, we can validate stdin and directory
    # because they will sent to the execution host  by condor transparently.
    if($universe eq 'standard')
    {
	if(! -d $description->directory())
	{
	    return Globus::GRAM::Error::BAD_DIRECTORY;
	}
	elsif(! -r $description->stdin())
	{
	    return Globus::GRAM::Error::STDIN_NOT_FOUND();
	}
	elsif(! -f $description->executable())
	{
	    return Globus::GRAM::Error::EXECUTABLE_NOT_FOUND();
	}
	elsif(! -x $description->executable())
	{
	    return Globus::GRAM::Error::EXECUTABLE_PERMISSIONS();
	}
    }

    $library_vars{LD_LIBRARY_PATH} = 0;
    if($Config{osname} eq 'irix')
    {
	$library_vars{LD_LIBRARYN32_PATH} = 0;
	$library_vars{LD_LIBRARY64_PATH} = 0;
    }
    @environment = $description->environment();
    foreach $tuple (@environment)
    {
	if(!ref($tuple) || scalar(@$tuple) != 2)
	{
	    return Globus::GRAM::Error::RSL_ENVIRONMENT();
	}
	if(exists($library_vars{$tuple->[0]}))
	{
	    $tuple->[1] .= ":$library_string";
	    $library_vars{$tuple->[0]} = 1;
	}
    }
    foreach (keys %library_vars)
    {
	if($library_vars{$_} == 0)
	{
	    push(@environment, [$_, $library_path]);
	}
    }
    $environment_string = join(';',
                               map {$_->[0] . "=" . $_->[1]} @environment);

    @arguments = $description->arguments();
    foreach (@arguments)
    {
	if(ref($_))
	{
	    return Globus::GRAM::Error::RSL_ARGUMENTS();
	}
    }
    if($arguments[0])
    {
	$argument_string = join(' ',
				map
				{
				    $_ =~ s/\\/\\\\/g;
				    $_ =~ s/\$/\\\$/g;
				    $_ =~ s/"/\\\"/g; #"
				    $_ =~ s/`/\\\`/g; #`
				    $_;
				}
				@arguments);
    }
    else
    {
	$argument_string = '';
    }

    @submit_attrs = $description->condorsubmit();
    if(defined($submit_attrs[0]))
    {
	foreach $tuple (@submit_attrs)
	{
	    if(!ref($tuple) || scalar(@$tuple) != 2)
	    {
		return Globus::GRAM::Error::RSL_SCHEDULER_SPECIFIC();
	    }
	}
	$submit_attrs_string = join("\n",
				map {$_->[0] . "=" . $_->[1]} @submit_attrs);
    }
    else
    {
	$submit_attrs_string = '';
    }

    # Create script for condor submission
    $script_url = "$tag/condor_script.$$";
    $self->fork_and_exec_cmd($cache_pgm, '-add', '-t', $tag, '-n',
            $script_url, 'file:/dev/null' );
    $script_filename = $self->pipe_out_cmd($cache_pgm, '-query', '-t', $tag,
            $script_url);
    chomp($script_filename);

    if($script_filename eq '')
    {
	return Globus::GRAM::::Error::TEMP_SCRIPT_FILE_FAILED;
    }

    local(*SCRIPT_FILE);

    open(SCRIPT_FILE, ">$script_filename") 
        or return Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED;

    print SCRIPT_FILE "#\n# description file for condor submission\n#\n";
    print SCRIPT_FILE "Universe = $universe\n";
    print SCRIPT_FILE "Notification = Never\n";
    print SCRIPT_FILE "Executable = " . $description->executable . "\n";

    $requirements  = "OpSys == \"" . $description->condor_os() . "\" ";
    $requirements .= " && Arch == \"" . $description->condor_arch() . "\" ";
    if($description->min_memory() ne "")
    {
	$requirements .= " && Memory >= " . $description->min_memory();
	$rank = "rank = Memory\n";
    }

    print SCRIPT_FILE "Requirements = $requirements\n";
    if($rank ne "")
    {
	print SCRIPT_FILE "$rank\n";
    }
    print SCRIPT_FILE "Environment = $environment_string\n";
    print SCRIPT_FILE "Arguments = $argument_string\n";
    print SCRIPT_FILE "InitialDir = " . $description->directory() . "\n";
    print SCRIPT_FILE "Input = " . $description->stdin() . "\n";
    print SCRIPT_FILE "Output = " . $description->stdout() . "\n";
    print SCRIPT_FILE "Error = " . $description->stderr() . "\n";
    print SCRIPT_FILE "Log = " . $self->{condor_logfile} . "\n";
    print SCRIPT_FILE "#Extra attributes specified by client\n";
    print SCRIPT_FILE "$submit_attrs_string\n";
    print SCRIPT_FILE "queue " . $description->count() . "\n";

    close(SCRIPT_FILE);

    local(*FH);
    my $pid = open(FH, "-|");
    if( !defined($pid)
    {
        # failure to fork
        @response_text = ();
    }
    elsif ($pid)
    {
        # parent
        @response_text = <FH>;
        close(FH);
    }
    else
    {
        # child
        open (STDERR, '>' . $description->stderr());
        select(STDERR); $| = 1;
        select(STDOUT); $| = 1;

        if (! exec { $condor_submit } $condor_submit, $script_filename)
        {
            exit(127);
        }
    }

    if(@response_text)
    {
	$response_line =(grep(/submitted to cluster/, @response_text))[0];
	$job_id = (split(/\./, (split(/\s+/, $response_line))[5]))[0];

	if($job_id ne '')
	{
	    $status = Globus::GRAM::JobState::PENDING;

	    return {JOB_STATE => Globus::GRAM::JobState::PENDING,
		    JOB_ID    => $job_id};
	}
    }
    return Globus::GRAM::Error::JOB_EXECUTION_FAILED;
}

sub poll
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $state;
    my $job_id = $description->job_id();
    my $num_done;
    my $num_run;
    my $num_evict;
    my $num_abort;

    $self->log("polling job " . $description->jobid());

    local(*CONDOR_LOG_FILE);
    open(CONDOR_LOG_FILE, "<".$self->{condor_logfile})
        || return { Globus::GRAM::JobState::DONE };

    @status = grep(/^[0-9]* \(0*${job_id}/, <CONDOR_LOG_FILE>);
    close(CONDOR_LOG_FILE);

    $num_done = scalar(grep(/^005/, @status));
    $num_run = scalar(grep(/^001/, @status));
    $num_evict = scalar(grep(/^004/, @status));
    $num_abort = scalar(grep(/^009/, @status));

    if($num_abort > 0)
    {
	$state = Globus::GRAM::JobState::FAILED;
	unlink($self->{condor_logfile});
    }
    elsif($num_done == $description->count())
    {
	$self->nfssync( $description->stdout(), 0 )
	    if $description->stdout() ne '';
	$self->nfssync( $description->stderr(), 0 )
	    if $description->stderr() ne '';

	$state = Globus::GRAM::JobState::DONE;
	unlink($self->{condor_logfile});
    }
    elsif($num_run == 0)
    {
	$state = Globus::GRAM::JobState::PENDING;
    }
    elsif($num_run > $num_evict)
    {
	$state = Globus::GRAM::JobState::ACTIVE;
    }
    else
    {
	$state = Globus::GRAM::JobState::SUSPENDED;
    }

    return { JOB_STATE => $state };
}

sub cancel
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();
    my $count = 0;

    $self->log("cancel job " . $description->jobid());
    # we do not need to be too efficient here
    $self->log(`$condor_rm $job_id 2>&1`);

    if($? == 0)
    {
	return { JOB_STATE => Globus::GRAM::JobState::FAILED };
    }
    else
    {
	return Globus::GRAM::Error::JOB_CANCEL_FAILED();
    }
}

1;
