use Globus::GRAM::Error;
use Globus::GRAM::JobState;
use Globus::GRAM::JobManager;
use Globus::Core::Paths;

package Globus::GRAM::JobManager::pbs;

@ISA = qw(Globus::GRAM::JobManager);

my ($mpirun, $qsub, $qstat, $qdel, $host_type, $remote_shell);

BEGIN
{
    $mpirun = '@MPIRUN@';
    $qsub =   '@QSUB@';
    $qstat =  '@QSTAT@';
    $qdel = '@QDEL@';
    $host_type = '@HOST_TYPE@'; # cluster|smp|chiba_cluster
    $remote_shell = '@REMOTE_SHELL@';
}

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $self = $class->SUPER::new(@_);
    
    bless $self, $class;
    return $self;
}

sub submit
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $status;
    my $pbs_job_script;
    my $pbs_job_script_name;
    my $errfile = "";
    my $queue;
    my $job_id;
    my $rsh_env;

    $self->log("Entering pbs submit");

    # verify existence of queue
    if(defined($description->queue()))
    {
        $queue = $description->queue();

	system("$qstat -Q $queue >/dev/null 2>/dev/null");
	if($? != 0)
	{
	    $self->log("Queue $queue not found.");
	    return Globus::GRAM::Error::INVALID_QUEUE;
	}
    }
    # check jobtype
    if(defined($description->jobtype()))
    {
	if($description->jobtype !~ /^(mpi|single|multiple)$/)
	{
	    return Globus::GRAM::Error::JOBTYPE_NOT_SUPPORTED;
	}
    }

    $self->log("Determining job max time cpu from job description");
    if(defined($description->max_cpu_time())) 
    {
	$cpu_time = $description->max_cpu_time();
	$self->log("   using maxcputime of $cpu_time");
    }
    elsif(defined($description->max_time()))
    {
	$cpu_time = $description->max_time();
	$self->log("   using maxtime of $cpu_time");
    }
    else
    {
	$cpu_time = 0;
	$self->log('   using queue default');
    }

    $self->log("Determining job max wall time limit from job description");
    if(defined($description->max_wall_time()))
    {
	$wall_time = $description->max_wall_time();
	$self->log("   using maxwalltime of $wall_time");
    }
    else
    {
	$wall_time = 0;
	$self->log('   using queue default');
    }

    $self->log('Building job script');

    $pbs_job_script_name = "$Globus::Core::Paths::local_tmpdir" .
                             "/pbs_job_script.$$";
    $pbs_job_script = new IO::File($pbs_job_script_name, '>');

    $pbs_job_script->print(<<EOF);
#! /bin/sh
# PBS batch job script built by Globus job manager
# PBS -S /bin/sh
EOF

    if(defined($queue))
    {
	$pbs_job_script->print("#PBS -q $queue\n");
    }
    if(defined($description->project()))
    {
	$pbs_job_script->print("#PBS -A " . $description->project() . "\n");
    }

    if($cpu_time != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $total_cpu_time = $cpu_time * $description->count();
	}
	else
	{
	    $total_cpu_time = $cpu_time;
	}
	$pbs_job_script->print("#PBS -l pcput=${cpu_time}:00\n");
	$pbs_job_script->print("#PBS -l cput=${total_cpu_time}:00\n");
    }

    if($wall_time != 0)
    {
	$pbs_job_script->print("#PBS -l walltime=${wall_time}:00\n");
    }

    if($description->max_memory() != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $max_memory = $description->max_memory() * $description->count;
	}
	else
	{
	    $max_memory = $description->max_memory();
	}
	$pbs_job_script->print("#PBS -l mem=${max_memory}mb\n");
    }
    $pbs_job_script->print("#PBS -o " . $description->stdout() . "\n");
    $pbs_job_script->print("#PBS -e " . $description->stderr() . "\n");
    $pbs_job_script->print("#PBS -l ncpus=" . $description->count() . "\n");

    if($description->host_count() != 0)
    {
	$pbs_job_script->print("#PBS -l nodes=" .
	                       $description->host_count().
			       "\n");
    }
    $rsh_env = "";

    foreach my $tuple ($description->environment())
    {
	push(@new_env, ${@{$tuple}}[0] . "=" . ${@{$tuple}}[1]);
	$rsh_env .= ${@{$tuple}}[0] . "=" . ${@{$tuple}}[1] . ";"
	         .  "export " . @{$tuple}[0] . ";";
    }
    $pbs_job_script->print("#PBS -v " .  join(',', @new_env));

    $pbs_job_script->print("\n#Change to directory requested by user\n");
    $pbs_job_script->print('cd ' . $description->directory() . "\n");

    if($description->arguments())
    {
	$args = join(' ', $description->arguments());
    }
    else
    {
	$args = "";
    }
    if($description->jobtype() eq "mpi")
    {
	$pbs_job_script->print("$mpirun -np " . $description->count());

	if($host_type eq 'chiba_cluster' ||
	   $host_type eq 'cluster')
	{
	    $pbs_job_script->print(" -machinefile \$PBS_NODEFILE ");
	}
	$pbs_job_script->print($description->executable()
	                       . " $args < "
			       . $description->stdin() . "\n");
    }
    elsif($description->jobtype() eq 'multiple' && $host_type eq 'smp')
    {
	for(my $i = 0; $i < $description->count(); $i++)
	{
	    $pbs_job_script->print($description->executable() . " $args <" .
	                           $description->stdin() . "&\n");
	}
	$pbs_job_script->print("wait\n");
    }
    elsif($description->jobtype() eq 'multiple')
    {
	my $count = $description->count;
	my $cmd;
	my $stdin = $description->stdin();

	$cmd = "cd " . $description->directory() . ";" . $rsh_env
	     . $description->executable() . " $args";

	$pbs_job_script->print(<<EOF);
	hosts=\`cat \$PBS_NODEFILE\`;
	counter=0
	while test \$counter -lt $count; do
	    for host in \$hosts; do
		if test \$counter -lt \$count; then
		    $remote_shell \$host '/bin/sh -c "$cmd"' < $stdin &
		    counter=\`expr \$counter + 1\`
		else
		    break
		fi
	    done
	done
	wait
EOF
    }
    else
    {
	$pbs_job_script->print($description->executable() . " $args <" .
	                       $description->stdin() . "\n");
    }
    if($host_type eq 'chiba_cluster')
    {
	$pbs_job_script->print("#ctrans nfs_in " .
	                       $description->directory() . "\n");
	$pbs_job_script->print("#ctrans nfs_out " .
	                       $description->directory() . "\n");
    }
    $pbs_job_script->close();

    if($description->logfile() ne "")
    {
        $errfile = "2>" . $description->logfile();
    }
    chomp($job_id = `$qsub < $pbs_job_script_name $errfile`);
    if($? == 0)
    {
        # truncate off the domain name
	$job_id =~ s/([^\.]*).([^\.]*)\..*/$1.$2/;
	unlink($pbs_job_script_name);

	return {JOB_ID => $job_id};
    }
    unlink($pbs_job_script_name);

    return Globus::GRAM::Error::INVALID_SCRIPT_REPLY;
}

sub poll
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();
    my $state;
    my $status_line;

    $self->log("polling job $job_id");

    # Get first line matching job id
    $_ = (grep(/$job_id/, `qstat $job_id`))[0];

    # Get 4th field (status)
    $_ = (split(/\s+/))[4];

    if(/Q|W|T/)
    {
	$state = Globus::GRAM::JobState::PENDING;
    }
    elsif(/S|H/)
    {
	$state = Globus::GRAM::JobState::SUSPENDED
    }
    elsif(/R|E/)
    {
	$state = Globus::GRAM::JobState::ACTIVE;
    }
    else
    {
	$state = Globus::GRAM::JobState::DONE;
    }

    return {JOB_STATE => $state};
}

sub cancel
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();

    $self->log("cancel job $job_id");

    system("$qdel $job_id >/dev/null 2>/dev/null");

    return {};
}

1;
