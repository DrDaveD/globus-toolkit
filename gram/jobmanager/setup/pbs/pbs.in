use Globus::GRAM::Error;
use Globus::GRAM::JobState;
use Globus::GRAM::JobManager;
use Globus::Core::Paths;

use Config;

# NOTE: This package name must match the name of the .pm file!!
package Globus::GRAM::JobManager::pbs;

@ISA = qw(Globus::GRAM::JobManager);

my ($mpirun, $mpiexec, $qsub, $qstat, $qdel, $cluster, $cpu_per_node, $remote_shell);

BEGIN
{
    $mpiexec = '@MPIEXEC@';
    $mpirun = '@MPIRUN@';
    $qsub =   '@QSUB@';
    $qstat =  '@QSTAT@';
    $qdel = '@QDEL@';
    $cluster = @CLUSTER@;
    $cpu_per_node = @CPU_PER_NODE@;
    $remote_shell = '@REMOTE_SHELL@';
}

sub myceil ($)
{
    my $x = shift;
    ( abs($x-int($x)) < 1E-12 ) ? $x : int($x < 0 ? $x : $x+1.0);
}

sub submit
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $status;
    my $pbs_job_script;
    my $pbs_job_script_name;
    my $pbs_qsub_err_name ;
    my $errfile = '';
    my $job_id;
    my $rsh_env;
    my @arguments;
    my $email_when = '';
    my $cache_pgm = "$Globus::Core::Paths::bindir/globus-gass-cache";
    my %library_vars;


    $self->log("Entering pbs submit");

    # check jobtype
    if(defined($description->jobtype()))
    {
	if($description->jobtype !~ /^(mpi|single|multiple)$/)
	{
	    return Globus::GRAM::Error::JOBTYPE_NOT_SUPPORTED;
	}
    }
    if( $description->directory eq '')
    {
	return Globus::GRAM::Error::RSL_DIRECTORY();
    }
    chdir $description->directory() or
        return Globus::GRAM::Error::BAD_DIRECTORY();

    $self->nfssync( $description->executable() )
	unless $description->executable() eq '';
    $self->nfssync( $description->stdin() )
	unless $description->stdin() eq '';
    if( $description->executable eq '')
    {
	return Globus::GRAM::Error::RSL_EXECUTABLE();
    }
    elsif(! -f $description->executable())
    {
	return Globus::GRAM::Error::EXECUTABLE_NOT_FOUND();
    }
    elsif(! -x $description->executable())
    {
	return Globus::GRAM::Error::EXECUTABLE_PERMISSIONS();
    }
    elsif( $description->stdin() eq '')
    {
	return Globus::GRAM::Error::RSL_STDIN;
    }
    elsif(! -r $description->stdin())
    {
       return Globus::GRAM::Error::STDIN_NOT_FOUND();
   }

    $self->log("Determining job max time cpu from job description");
    if(defined($description->max_cpu_time())) 
    {
	$cpu_time = $description->max_cpu_time();
	$self->log("   using maxcputime of $cpu_time");
    }
    elsif(! $cluster && defined($description->max_time()))
    {
        $cpu_time = $description->max_time();
        $self->log("   using maxtime of $cpu_time");
    }
    else
    {
	$cpu_time = 0;
	$self->log('   using queue default');
    }

    $self->log("Determining job max wall time limit from job description");
    if(defined($description->max_wall_time()))
    {
	$wall_time = $description->max_wall_time();
	$self->log("   using maxwalltime of $wall_time");
    }
    elsif($cluster && defined($description->max_time()))
    {
       $wall_time = $description->max_time();
       $self->log("   using maxtime of $wall_time");
    }
    else
    {
	$wall_time = 0;
	$self->log('   using queue default');
    }

    $self->log('Building job script');

    $pbs_job_script_name = $self->job_dir() . '/scheduler_pbs_job_script';

    local(*JOB);
    open( JOB, '>' . $pbs_job_script_name );
    print JOB<<"EOF";
#! /bin/sh
# PBS batch job script built by Globus job manager
#
#PBS -S /bin/sh
EOF

    if($description->email_address() ne '')
    {
        print JOB '#PBS -M ', $description->email_address(), "\n";
    }
    if($description->emailonabort() eq 'yes')
    {
        $email_when .= 'a';
    }
    if($description->emailonexecution() eq 'yes')
    {
        $email_when .= 'b';
    }
    if($description->emailontermination() eq 'yes')
    {
        $email_when .= 'e';
    }
    if($email_when eq '')
    {
	$email_when = 'n';
    }
    print JOB "#PBS -m $email_when\n";

    if($description->queue() ne '')
    {
        print JOB '#PBS -q ', $description->queue(), "\n";
    }
    if($description->project() ne '')
    {
	print JOB '#PBS -A ', $description->project(), "\n";
    }

    if($cpu_time != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $total_cpu_time = $cpu_time * $description->count();
	}
	else
	{
	    $total_cpu_time = $cpu_time;
	}
	print JOB "#PBS -l pcput=${cpu_time}:00\n";
	print JOB "#PBS -l cput=${total_cpu_time}:00\n";
    }

    if($wall_time != 0)
    {
	print JOB "#PBS -l walltime=${wall_time}:00\n";
    }

    if($description->max_memory() != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $max_memory = $description->max_memory() * $description->count;
	}
	else
	{
	    $max_memory = $description->max_memory();
	}
	print JOB "#PBS -l mem=${max_memory}mb\n";
    }
    print JOB '#PBS -o ', $description->stdout(), "\n";
    print JOB '#PBS -e ', $description->stderr(), "\n";

    if($description->host_count() != 0)
    {
	print JOB '#PBS -l nodes=', $description->host_count(), "\n";
    }
    elsif($cluster && $cpu_per_node != 0)
    {
	print JOB '#PBS -l nodes=',
	    myceil($description->count / $cpu_per_node), "\n";
    }

    $rsh_env = '';

    $library_vars{LD_LIBRARY_PATH} = 0;
    if($Config{osname} eq 'irix')
    {
	$library_vars{LD_LIBRARYN32_PATH} = 0;
	$library_vars{LD_LIBRARY64_PATH} = 0;
    }

    foreach my $tuple ($description->environment())
    {
	if(!ref($tuple) || scalar(@$tuple) != 2)
	{
	    return Globus::GRAM::Error::RSL_ENVIRONMENT();
	}
	if(exists($library_vars{$tuple->[0]}))
	{
	    $tuple->[1] .= ":$library_string";
	    $library_vars{$tuple->[0]} = 1;
	}

        push(@new_env, $tuple->[0] . '="' . $tuple->[1] . '"');

	$tuple->[0] =~ s/\\/\\\\/g;
	$tuple->[0] =~ s/\$/\\\$/g;
	$tuple->[0] =~ s/"/\\\"/g; #"
	$tuple->[0] =~ s/`/\\\`/g; #`

	$tuple->[1] =~ s/\\/\\\\/g;
	$tuple->[1] =~ s/\$/\\\$/g;
	$tuple->[1] =~ s/"/\\\"/g; #"
	$tuple->[1] =~ s/`/\\\`/g; #`

        $rsh_env .= $tuple->[0] . '="' . $tuple->[1] . "\";\n"
	         .  'export ' . $tuple->[0] . ";\n";
    }
    foreach (keys %library_vars)
    {
	if($library_vars{$_} == 0)
	{
            my $library_path = $description->library_path();
	    push(@new_env, $_ . '=' . $library_path);
	    $rsh_env .= "$_=$library_path;\n"
	              . "export $_;\n";
	}
    }

    print JOB "$rsh_env";

    print JOB "\n#Change to directory requested by user\n";
    print JOB 'cd ' . $description->directory() . "\n";

    @arguments = $description->arguments();

    foreach(@arguments)
    {
        if(ref($_))
	{
	    return Globus::GRAM::Error::RSL_ARGUMENTS;
	}
    }
    if($#arguments >= 0)
    {
        foreach(@arguments)
	{
	    $self->log("Transforming argument \"$_\"\n");
	    $_ =~ s/\\/\\\\/g;
	    $_ =~ s/\$/\\\$/g;
	    $_ =~ s/"/\\\"/g; #"
	    $_ =~ s/`/\\\`/g; #`
	    $self->log("Transformed to \"$_\"\n");

	    $args .= '"' . $_ . '" ';
	}
    }
    else
    {
	$args = '';
    }

    if ($description->executable() =~ m|^[^/]|)
    {
        $description->add('executable', './' . $description->executable());
    }
    if($description->jobtype() eq 'multiple' && !$cluster)
    {
	for(my $i = 0; $i < $description->count(); $i++)
	{
	    print JOB $description->executable(), " $args <",
	        $description->stdin(), "&\n";
	}
	print JOB "wait\n";
    }
    elsif($description->jobtype() eq 'mpi' ||
            $description->jobtype() eq 'multiple')
    {
	my $count = $description->count;
	my $cmd_script_name ;
	my $cmd_script ;
	my $stdin = $description->stdin();

        $cmd_script_name = $self->job_dir() . '/scheduler_pbs_cmd_script';

	local(*CMD);
	if ( open( CMD, ">$cmd_script_name" ) ) 
	{
	    print CMD "#!/bin/sh\n";
	    print CMD 'cd ', $description->directory(), "\n";
	    print CMD "$rsh_env\n";
	    print CMD $description->executable(), " $args\n";
	    close(CMD);
            chmod 0700, $cmd_script_name;

	    $self->nfssync( $cmd_script_name );
	} 
	else 
	{
	    # FIXME: what to do in error?
            return Globus::GRAM::Error::TEMP_SCRIPT_FILE_FAILED();
	}

        if ($description->jobtype() eq "mpi")
        {
            if ($mpiexec ne 'no')
            {
                my $machinefilearg = "";
                if ($cluster)
                {
                    $machinefilearg = ' -machinefile $PBS_NODEFILE';
                }
                print JOB "$mpiexec $machinefilearg -n " . $description->count();
            }
            else
            {
                print JOB "$mpirun -np " . $description->count();
                if ($cluster)
                {
                    print JOB ' -machinefile $PBS_NODEFILE';
                }
            }

            print JOB " $cmd_script_name < " .  $description->stdin() . "\n";
        }
        else
        {
            print JOB <<"EOF";

hosts=\`cat \$PBS_NODEFILE\`;
counter=0
while test \$counter -lt $count; do
    for host in \$hosts; do
        if test \$counter -lt $count; then
            $remote_shell \$host "/bin/sh $cmd_script_name" < $stdin &
            counter=\`expr \$counter + 1\`
        else
            break
        fi
    done
done
wait

EOF
        }
    }
    else
    {
	print JOB $description->executable(), " $args <",
	    $description->stdin(), "\n";
    }
    close(JOB);

    $pbs_qsub_err_name = $self->job_dir() . '/scheduler_pbs_submit_stderr';
    $errfile = "2>$pbs_qsub_err_name";

    $self->nfssync( $pbs_job_script_name );
    $self->nfssync( $pbs_qsub_err_name );
    $self->log("submitting job -- $qsub < $pbs_job_script_name $errfile");
    chomp($job_id = `$qsub < $pbs_job_script_name $errfile`);

    if($? == 0)
    {
        $self->log("job submission successful, setting state to PENDING");
	return {JOB_ID => $job_id,
	        JOB_STATE => Globus::GRAM::JobState::PENDING };
    }
    else
    {
        local(*ERR);
        open(ERR, "<$pbs_qsub_err_name");
        local $/;
        my $stderr = <ERR>;
        close(ERR);

        $self->log("qsub returned $job_id");
        $self->log("qsub stderr $stderr");

        open(ERR, ">" . $description->stderr());
        print ERR $stderr;
        close(ERR);

        $stderr =~ s/\n/ /g;

        $self->respond({GT3_FAILURE_MESSAGE => $stderr });
    }

    return Globus::GRAM::Error::JOB_EXECUTION_FAILED();
}

sub poll
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();
    my $state;
    my $status_line;
    my $exit_code;

    $self->log("polling job $job_id");

    # Get job id from the full qstat output.
    $_ = (grep(/job_state/, $self->pipe_out_cmd($qstat, '-f', $job_id)))[0];
    # get the exit code of the qstat command.  for info search $CHILD_ERROR
    # in perlvar documentation.
    $exit_code = $? >> 8;

    $self->log("qstat job_state line is: $_");

    # return code 153 = "Unknown Job Id".
    # verifying that the job is no longer there.
    if($exit_code == 153)
    {
        $self->log("qstat rc is 153 == Unknown Job ID == DONE");
        $state = Globus::GRAM::JobState::DONE;
	$self->nfssync( $description->stdout() )
	    if $description->stdout() ne '';
	$self->nfssync( $description->stderr() )
	    if $description->stderr() ne '';
    }
    else
    {

        # Get 3rd field (after = )
        $_ = (split(/\s+/))[3];

        if(/Q|W|T/)
        {
            $state = Globus::GRAM::JobState::PENDING;
        }
        elsif(/S|H/)
        {
            $state = Globus::GRAM::JobState::SUSPENDED
        }
        elsif(/R|E/)
        {
            $state = Globus::GRAM::JobState::ACTIVE;
        }
        else
        {
            # This else is reached by an unknown response from pbs.
            # It could be that PBS was temporarily unavailable, but that it
            # can recover and the submitted job is fine.
            # So, we want the JM to ignore this poll and keep the same state
            # as the previous state.  Returning an empty hash below will tell
            # the JM to ignore the respose.
            $self->log("qstat returned an unknown response.  Telling JM to ignore this poll");
            return {};
        }
    }

    return {JOB_STATE => $state};
}

sub cancel
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();

    $self->log("cancel job $job_id");

    $self->fork_and_exec_cmd( $qdel, $job_id );

    if($? == 0)
    {
	return { JOB_STATE => Globus::GRAM::JobState::FAILED }
    }

    return Globus::GRAM::Error::JOB_CANCEL_FAILED();
}

1;
