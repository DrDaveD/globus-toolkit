dnl

AC_REVISION($Revision$)
AC_INIT(Makefile.am)

GLOBUS_INIT

AM_PROG_LIBTOOL

dnl config header goes here

dnl Initialize the automake rules the last argument
AM_INIT_AUTOMAKE($GPT_NAME, $GPT_VERSION)

LAC_DOXYGEN("../", "*.dox")

AC_PATH_PROG(MPIEXEC, mpiexec, no)
if test "$MPIEXEC" = "no" ; then
    AC_MSG_WARN([Cannot locate mpiexec])
fi

AC_PATH_PROG(MPIRUN, mpirun, no)
if test "$MPIRUN" = "no" ; then
    AC_MSG_WARN([Cannot locate mpirun])
fi

AC_PATH_PROG(QDEL, qdel, no)
if test "$QDEL" = "no" ; then
    AC_MSG_WARN([Cannot locate qdel])
fi
AC_PATH_PROG(QSTAT, qstat, no)
if test "$QSTAT" = "no" ; then
    AC_MSG_WARN([Cannot locate qstat])
fi
AC_PATH_PROG(QSUB, qsub, no)
if test "$QSUB" = "no" ; then
    AC_MSG_WARN([Cannot locate qsub])
fi

AC_ARG_WITH(cluster,
    AC_HELP_STRING(
        [--without-cluster],
        [Disable using remote shell in job scripts]),
   [
     if test "$withval" != "no"; then
	 CLUSTER=1
     else
	 CLUSTER=0
     fi
   ],
   CLUSTER=1)

AC_SUBST(CLUSTER)

AC_ARG_WITH(cpu-per-node,
    AC_HELP_STRING(
        [--with-cpu-per-node=COUNT],
        [Run COUNT jobs per node when running a parallel job]),
   [ if test $withval -lt 0 2>/dev/null; then
       AC_MSG_ERROR(Invalid cpu-per-node count)
     fi
     CPU_PER_NODE=$withval
   ],
   CPU_PER_NODE=1)

AC_SUBST(CPU_PER_NODE)
       
AC_ARG_WITH(remote-shell,
    AC_HELP_STRING(
        [--with-remote-shell=REMOTE-SHELL-COMMAND|default],
        [Use REMOTE-SHELL-COMMAND to run job processes on PBS nodes in a cluster]),
            [ case "$withval" in
                default|yes)
                  AC_PATH_PROGS(REMOTE_SHELL, ssh rsh, no)
                  ;;
                *)
                  AC_PATH_PROG(REMOTE_SHELL, $withval, no)
                  ;;
              esac

              if test $REMOTE_SHELL = no; then
                  AC_MSG_ERROR("Cannot locate remote shell")
              fi
            ],
            [AC_PATH_PROGS(REMOTE_SHELL, ssh rsh, no)]
            )

AC_ARG_WITH(log-path,
    AC_HELP_STRING(
        [--with-log-path=DIRECTORY],
        [Parse PBS logs in DIRECTORY when using the SEG]),
    [PBS_LOG_PATH=$withval],
    [PBS_LOG_PATH=''])
AC_SUBST(PBS_LOG_PATH)

AM_CONDITIONAL(SEG_ENABLED_COND, [test "$SEG_ENABLED" = "yes"])

# SoftEnv installation directory
AC_ARG_WITH(softenv-dir,
   AC_HELP_STRING([--with-softenv-dir], [softenv_install_dir]),
   [SOFTENV_DIR=$withval],
   [SOFTENV_DIR=''])

AC_SUBST(SOFTENV_DIR)

xml_catalog_path="notset"
AC_ARG_WITH(
    xml-catalog,
    [  --with-xml-catalog=PATH       Path to XML catalog],
    [xml_catalog_path="$withval"],
    [xml_catalog_path="notset"])

AC_PATH_PROG(XSLTPROC, "xsltproc")
AC_PATH_PROG(XMLLINT, "xmllint")

if test "x$xml_catalog_path" != x"notset"; then
    if test ! -f "$xml_catalog_path"; then
        AC_MSG_ERROR([Invalid XML catalog path])
    else
        XML_CATALOG_PATH=$xml_catalog_path
        AC_SUBST(XML_CATALOG_PATH)
    fi
fi

AC_ARG_WITH(globus-state-dir,
	AC_HELP_STRING(
		[--with-globus-state-dir=PATH],
		[Path to Globus state files]),
	globusstatedir="$withval",
	globusstatedir=$localstatedir)

AC_SUBST(globusstatedir)

AC_ARG_WITH(seg,
	AC_HELP_STRING(
		[--with-seg=yes|no],
		[Enable GRAM configuration with the SEG module]),
	SEG_ENABLED="$withval",
	SEG_ENABLED="no")
case "$SEG_ENABLED" in
	yes|no)
            :
            ;;
	*)
	    AC_MSG_ERROR([Invalid argument to --with-seg])
	    ;;
esac


AM_CONDITIONAL(SEG_ENABLED_COND, [test "$SEG_ENABLED" = "yes"])

AM_CONDITIONAL([GENERATE_MANPAGES], [test "$xml_catalog_path" != "notset"])


GLOBUS_FINALIZE

AC_OUTPUT(
	Makefile
	globus-pbs.conf
	seg/Makefile
	pkgdata/Makefile
	pkgdata/pkg_data_src.gpt
	doxygen/Doxyfile
	doxygen/Doxyfile-internal
	doxygen/Makefile
	version.h
)
