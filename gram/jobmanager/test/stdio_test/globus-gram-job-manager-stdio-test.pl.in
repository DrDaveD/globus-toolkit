#! /usr/bin/env perl

use Globus::Core::Paths;
use IO::File;
use Sys::Hostname;
use Test;
use File::Path;
use File::Compare;

my (@tests, @todo) = ();
my $contact = $ENV{CONTACT_STRING};
my $testtmp = &make_tmpdir();
my $testdatadir = "$ENV{GLOBUS_LOCATION}/share/@PACKAGE@";
my $gridftp_server_installed = &check_gridftp;

my @test_cases=qw(
    stdio001 stdio002 stdio003
);

sub test_rsl
{
    my $testname = shift;
    my $additional_rsl = shift;
    my $testrsl = "$testname.rsl";
    my $additionalrslfile = "$testtmp/$testname.rsl";
    my $test_rsl_fp = new IO::File("$testdatadir/$testrsl", '<');
    my $out_rsl_fp = new IO::File($additionalrslfile, '>');
    my $rsl_list;

    $rsl_list = join('', <$test_rsl_fp>);
    $rsl_list =~ s/&//;
    $test_rsl_fp->close();

    $out_rsl_fp->print('&');

    # need to put the RSL substitutions in the additional RSL
    # before the main RSL clauses
    if($additional_rsl ne '')
    {
	$out_rsl_fp->print($additional_rsl . "\n");
    }
    $out_rsl_fp->print($rsl_list);
    
    $out_rsl_fp->close();

    system("globusrun -s -r \"$contact\" -f $additionalrslfile");

    $rc = $? >> 8;

    if($rc != 0)
    {
	foreach(glob("$testdatadir/$testname.out.*"),
		glob("$testdatadir/$testname.err.*"))
	{
	    my $compare_filename;

	    if($_ =~ m/\.out\.[0-9]+$/)
	    {
		$compare_filename = "$testdatadir/$testname.out";
	    }
	    elsif($_ =~ m/\.err\.[0-9]+$/)
	    {
		$compare_filename = "$testdatadir/$testname.err";
	    }
	    if(File::Compare::compare($_, "$compare_filename") != 0)
	    {
		$rc = "comparison of $_ failed";
		last;
	    }
	}
    }

    ok("$testname:$additional_rsl:$rc", "$testname:$additional_rsl:0");
}

foreach(@test_cases)
{
    my $testtmprsl = "(rsl_substitution = "
                   . "   (TEST_STDOUT \\\"$testtmp/$_.out\\\")"
                   . "   (TEST_STDERR \\\"$testtmp/$_.err\\\")"
		   . "   (TEST_HOST \\\"". hostname . "\\\")"
	           . ")";
    push(@tests, "test_rsl(\"$_\", \"$testtmprsl\")");
    if(! $gridftp_server_installed)
    {
	push(@todo, scalar(@tests));
    }
}

if(@ARGV)
{
    plan tests => scalar(@ARGV);
    foreach(@ARGV)
    {
	eval "&$tests[$_-1]";
    }
}
else
{
    plan tests => scalar(@tests), todo => \@todo;

    foreach (@tests)
    {
	eval "&$_";
    }
}

sub make_tmpdir
{
    my $root;
    my $suffix = '/gram_jobmanager_test_';
    my $created = 0;
    my $tmpname;
    my @acceptable = split(//, "abcdefghijklmnopqrstuvwxyz".
			       "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
			       "0123456789");
    if(exists($ENV{TMPDIR}))
    {
	$root = $ENV{TMPDIR};
    }
    else
    {
	$root = '/tmp';
    }
    while($created == 0)
    {
	$tmpname = $root . $suffix .
	           $acceptable[rand() * $#acceptable] .
	           $acceptable[rand() * $#acceptable] .
	           $acceptable[rand() * $#acceptable] .
	           $acceptable[rand() * $#acceptable] .
	           $acceptable[rand() * $#acceptable] .
	           $acceptable[rand() * $#acceptable];
	$created = mkdir($tmpname, 0700);
	if($created)
	{
	    if(-l $tmpname or ! -d $tmpname or ! -o $tmpname)
	    {
		$created = 0;
	    }
	}
    }
    return $tmpname;
}

sub check_gridftp
{
    my $query_handle;
    my @query_output;

    $query_handle = new IO::File(
	$Globus::Core::Paths::sbindir
	. '/gpt_query '
	. 'globus_gridftp_server|');

    $query_output = grep(/^globus_gridftp_server-.*_pgm(_static)??/,
                         <$query_handle>);
    $query_handle->close();

    return ($query_output > 0);
}

END
{
    if(-d $testtmp and -o $testtmp)
    {
	File::Path::rmtree($testtmp);
    }
}
