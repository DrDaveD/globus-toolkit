# Copyright 1999-2010 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package Uploader;

@GLOBUS_PERL_INITIALIZER@

use Util;
use Globus::Core::Paths;
use strict;

sub new() {

  my $proto = shift;
  my $auditdir = shift;
  my $self={};
  bless($self, $proto);

  # check if the audit directory had been passed as argument
  if (Util::trim($auditdir) eq "") {
      Util::error("No audit directory specified in constructor of Uploader");
  } else {
      $self->{'auditdir'} = $auditdir;
  }
  return $self;
}

sub loadGram2RecordsIntoDatabase() {

    my $self = shift;
    my $conf = shift;
    my $expectErrors = shift;
    my $expectedNumberLeftoverRecords = shift;
    my $uploader = "$Globus::Core::Paths::libexecdir/globus-gram-audit";
    my $uploaderArgs = "--conf $conf --check --delete --audit-directory " . $self->{'auditdir'};

    $uploaderArgs .= "> /dev/null 2>/dev/null" unless ($ENV{TEST_DEBUG});
    
    if (! -e $uploader) {
        Util::error("Can't find " . $uploader . " to upload records");
        return (0 == 1);
    } else {
        # load the records into the database
        my $rcx = system("$uploader $uploaderArgs");
        
        if ($expectErrors == 0) {
            if ($rcx != 0) {
                Util::error("Error during upload, but did not expect errors");
                return (0 == 1);
            }
        } else {
            if ($rcx == 0) {
                Util::error("Expected errors, but uploader returned success");
                return (0 == 1);        
            }
        }
    }
    
    # verify that the number of leftover files in the audit
    # directory fits with the number of expected errors
    Util::debug("Checking for " . $expectedNumberLeftoverRecords .
        " leftover audit record files after upload in " . $self->{'auditdir'});    
    my @leftoverFiles = glob($self->{'auditdir'}."/*.gramaudit");
    my $count = @leftoverFiles;
    if ($count != $expectedNumberLeftoverRecords) {
        Util::error("Expected " . $expectedNumberLeftoverRecords . 
            " leftover files, but " . $count . " files are left over");
        return (0 == 1);                           
    }

    return (0 == 0);
}

1;
