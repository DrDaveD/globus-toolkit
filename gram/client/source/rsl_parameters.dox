/**
@page globus_gram_rsl_parameters GRAM RSL Parameters

Below is the list of RSL paramters that the GRAM jobmanager attempts to locate in the RSL specification and a definition of their use.

<dl>
<dt><b>(directory=value)</b></dt>
<dd>
Specifies the path of the directory the jobmanager will use as the default
directory for the requested job.

Default: Current working directory (as set by the gatekeeper).
</dd> 
<dt><b>(executable=value)</b> <em>GASS enabled</em> / <em>required
parameter</em>
</dt>
<dd>
The name of the executable file to run on the remote machine. If the value is a
GASS URL, the file is transferred to the remote gass cache before executing the
job and removed after the job has terminated.

Default: None
</dd>
<dt><b>(arguments=value [value] [value] ...)</b></dt>
<dd>
The command line arguments for the executable. Use quotes, if a space is required in a single argument.
 
<dl>
<dt>Example:</dt>
<dd>
@code
( arguments= "a and b" ccc d )
@endcode

is equivalent to
@code
argv[1]="a and b"
argv[2]="ccc"
argv[3]="d"
@endcode
</dd>
</dl>

Default: NULL
</dd>
<dt><b>(stdin=value)</b> <em>GASS enabled</em></dt>
<dd>
The name of the file to be used as standard input for the executable on the
remote machine. If the value is a GASS URL, the file is transferred to the
remote gass cache before executing the job and removed after the job has
terminated.

Default: /dev/null
</dd>
<dt><b>(stdout=value)</b> <em>GASS enabled</em></dt>
<dd>
The name of the remote file to store the standard output from the job. If the
value is a GASS URL, the standard output from the job is transferred
dynamically during the execution of the job.

Default: /dev/null
</dd>

<dt><b>(stderr=value)</b> <em>GASS enabled</em></dt>
<dd>
The name of the remote file to store the standard error from the job. If the value is a GASS URL, the standard error from the job is transferred dynamically during the execution of the job.
 
Default: /dev/null
</dd>

<dt><b>(count=value)</b></dt>
<dd>
The number of executions of the executable.

Default: 1
</dd>

<dt><b>(environment=(var value) [(var value)] ...)</b></dt>
<dd>
The environment variables that will be defined for the executable in addition
to default set that is given to the job by the jobmanager.
 
Examples:
@code
( environment= (VAR_A value_a) )
( environment= (JOE mama)(PI 3.1415) )
@endcode
 
The C-shell equivalent of the above examples:
@code
setenv VAR_A value_a
setenv JOE mama
setenv PI 3.1415
@endcode
 
The Bourne shell equivalent of the above examples:
@code
VAR_A=value_a; export VAR_A
JOE=mama; export JOE
PI=3.1415; export PI
@endcode
 
Default: NULL
</dd>

<dt><b>(maxTime=value)</b></dt>
<dd>
The maximum walltime or cputime for a single execution of the executable.
Walltime or cputime is selected by the GRAM scheduler being interfaced. The
units is in minutes. The value will go through an atoi() conversion in order
to get an integer.
 
Default: None. Accepts local scheduler default if any.
</dd>

<dt><b>(maxWallTime=value)</b></dt>
<dd>
Explicitly set the maximum walltime for a single execution of the executable.
The units is in minutes. The value will go through an atoi() conversion in
order to get an integer. If the GRAM scheduler cannot set walltime, then an
error will be returned.
 
Default: None. Accepts local scheduler default if any.
</dd>

<dt><b>(maxCpuTime=value)</b></dt>
<dd>
Explicitly set the maximum cputime for a single execution of the executable.
The units is in minutes. The value will go through an atoi() conversion in
order to get an integer. If the GRAM scheduler cannot set cputime, then an
error will be returned.
 
Default: None. Accepts local scheduler default if any.
</dd>

<dt><b>(jobType=single|multiple|mpi|condor)</b></dt>
<dd>
This specifies how the jobmanager should start the job.
single - Even if the count > 1, only start 1 process or thread

<ul>
<li><b>multiple</b> - start count processes or threads</li>

<li><b>mpi</b> - use the appropriate method (e.g. mpirun on SGI Origin or POE
on IBM SP) to start a program compiled with a vendor-provided MPI library.
Program is started with count nodes.</li>

<li><b>condor</b> - starts condor jobs in the "condor" universe. (default is
vanilla)</li>
</ul>
 
Default: multiple
</dd>

<dt><b>(gramMyJob=independent|collective)</b></dt>
<dd>
This specifies how the gram myjob interface will behave in the started
processes.

<ul>
<li><b>independent</b> - Even if the count > 1, only start 1 process or
thread</li>
<li><b>collective</b> - gram_myjob_count() will return count for each of the
processes.  gram_myjob_rank() will return a unique value between 0 and count-1
for each of the processes.</li>
</ul>
 
Default: collective
</dd>

<dt><b>(queue=value)</b></dt>
<dd>
Target the job to a queue (class) name as defined by the scheduler at the
defined (remote) resource.
 
Default: None
</dd>

<dt><b>(project=value)</b></dt>
<dd>
Target the job to be allocated to a project account as defined by the scheduler
at the defined (remote) resource.
 
Default: None
</dd>

<dt><b>(hostCount=value)</b></dt>
<dd>
Only applies to clusters of SMP computers, such as newer IBM SP systems.
Defines the number of nodes ("pizza boxes") to distribute the "count" processes
across.
 
Default: None
</dd>

<dt><b>(dryRun=yes|no)</b></dt>
<dd>
If dryrun = yes then the jobmanager will not submit the job for execution and
will return success.
 
Default: no
</dd>

<dt><b>(minMemory=value)</b></dt>
<dd>
Specify the minumum amount of memory required for this job. Units are in
Megabytes.
 
Default: None
</dd>

<dt><b>(maxMemory=value)</b></dt>
<dd>
Specify the maximum amount of memory required for this job. Units are in
Megabytes.
 
Default: None
</dd>

</dl>

<h2>Signal-Related RSL Attributes</h2>

The following attributes are new in the Globus 2.0 release, and are
only useful when used along with the appropriate globus_gram_protocol_signal_t
signals. Previous releases of the job manager will ignore these attributes.

<dl>
<dt><b>(save_state = yes)</b></dt>
<dd>
Causes the jobmanager to save it's job state information to a persistent
file on disk. If the job manager exits or is suspended, the client can later
start up a new job manager which can continue monitoring the job.

Default: None
</dd>

<dt><b>(two_phase = timeout)</b></dt>
<dd>
Use a two-phase commit for job submission and completion. The job manager
will respond to the initial job request with a WAITING_FOR_COMMIT error. It 
will then wait for a signal from the client before doing the actual job
submission. The integer supplied is the number of seconds the job manager
should wait before timing out. If the job manager times out before receiving
the commit signal, or if a client issues a cancel signal, the job manager will
clean up the job's files and exit, sending a callback with the job status
as GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED.

After the job manager sends a DONE or FAILED callback, it will wait for a
commit signal from the client. If it receives one, it cleans up and exits as
usual. If it times out and save_state was enabled, it will leave all of the
job's files in place and exit (assuming the client is down and will attempt a
job restart later). The timeoutvalue can be extended via a signal.

When one of the following errors occurs, the job manager does not delete the
job state file when it exits:

<ul>
<li>GLOBUS_GRAM_PROTOCOL_ERROR_COMMIT_TIMED_OUT</li>
<li>GLOBUS_GRAM_PROTOCOL_ERROR_TTL_EXPIRED</li>
<li>GLOBUS_GRAM_PROTOCOL_ERROR_JM_STOPPED</li>
<li>GLOBUS_GRAM_PROTOCOL_ERROR_USER_PROXY_EXPIRED</li>
</ul>

In these cases, it can not be restarted, so the job manager will not wait for
the commit signal after sending the FAILED callback.

Default: None
</dd>

<dt><b>(restart = old_jm_contact)</b></dt>
<dd>
Start a new job manager, but instead of submitting a new job, start managing an
existing job. The job manager will search for the job state file created by the
original job manager. If it finds the file and successfully reads it, it will
become the new manager of the job, sending callbacks on status and streaming
stdout/err if appropriate. It will fail if it detects that the old jobmanager
is still alive (via a timestamp in the state file). If stdout or stderr was
being streamed over the network, new stdout and stderr attributes can be
specified in the restart RSL and the jobmanager will stream to the new
locations (useful when output is going to a GASS server started by the client
that's listening on a dynamic port, and the client was restarted). The new job
manager will return a new contact string that should be used to communicate
with it. If a jobmanager is restarted multiple times, any of the previous
contact strings can be given for the  restart attribute.

Default: None
</dd>

<dt><b>(stdout_position = value)</b></dt>
<dd>
In an RSL containing the <b>(restart = yes)</b> relation, specify where in
the file remote output streaming should be restarted from.

Default: 0
</dd>


<dt><b>(stderr_position = value)</b></dt>
<dd>
In an RSL containing the <b>(restart = yes)</b> relation, specify where in
the file remote standard error streaming should be restarted from.

Default: 0
</dd>

<dt><b>(remote_io_url = value)</b></dt>
<dd>
Writes the given value (a URL base string) to a file, and adds the path
to that file to the environment throught the GLOBUS_REMOTE_IO_URL environment
variable. If this is specified as part of a job restart RSL, the job manager
will update the file's contents. This is intended for jobs that want to
access files via GASS, but the URL of the GASS server has changed due to
a GASS server restart.

Default: None
</dd>


</dl>
*/
