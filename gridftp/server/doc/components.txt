Components:
===========

-- server library
-- control.c
-- data.c
-- DSI interface
-- DSI implementations


server library
--------------
The server library is the component of the server that interprites the
control channel.  It has a defined API that is documented at:
When the client sends a command the requires attention the server library 
calls out to the various functions that are defined in control.c.  These
events are broken down into the following categories:

commands
-- mkdir, rmdir, delete, chmod

resource query
-- stat, size, mlst

transfer
-- store, retrieve, list, mlsd

data connection establishment
-- passive, port, spas, spor

Client commands that set or query state but require no imediate action do 
not call out to the server.  Example commands are HELP, OPTS, FEAT, PWD, 
MODE, TYPE, etc.

control.c
---------
This is a small part of the overall picture but serves as the glue 
between the control channel and the movement of data so it is important
to mention.  Whenever the server library requires action it calls into 
source code located in this file.  This is a thin layer that then calls
into the data.c file.

data.c
------
This piece of the server has two purposes.  To start with it implements the
data channel coded and provides an internal API that allows any dsi 
implementation to utilize.  This removes the burden of data channel
protocol interpritation from the stroage impementations.
Additionally it marshalls calls between control.c and the data storage 
interface (DSI).  As will be explained the DSI is a modular interface to
a storage medium.

DSI
---
This is a modular plugable interface to a storage medium.  Some example
implementations are localfile system, HPSS, striped file system, etc.
This is the part of server that will actually manipulate, open send/recv 
files.  Since the server can handle many different storage medium types it 
was neccessary to allow for various implementaions in this plugable fashion.

IPC
---
Network code that allows for functions to be remotly called.

Local server
============
The server has a variety of modes of operation.  The first described here
is local mode.  This is the most simple case.  In this mode the server 
runs as one process.  Here
we describe the interactions between the above described componentes as
they run in this mode.

A client makes verious commands that the server library deals with.  As
soon as an interesting command occurs (RETR) the server libary calls 
into control.c.  Here the server has been configured with the 'local' dsi
interface.  It makes a call to send_func in data.c given this 'local' iface.
data.c (first notices that local dsi is capable of sending a file -- 
more explained later) safely dispatches the call to to send_func inside 
the local dsi
implementation.  Now, the implementation runs code that will send the file
across the network.  To do this is opens the file off of local disk, and
uses the data channel iperpriter funcitons provided in data.c to send 
the file across the wire. 

Remote server
=============
In remote mode the server has 2 processes, the frontend which handles 
control channel interpritation, and the backend which handles the source
and sink of data.  

Again as commands come in the server library handles them until one
such as RETR arrives.  At this point the server again calls into control.c
and again the call is dispatch to the interface with which data.c is 
configured.  In this case it is the remote interface.  data.c can look 
at this interface and determine that it is not the final DSI in the chain,
and therefore alters its behavior accordingly.  When remote dsi is entered
it uses the IPC to remotely call the same funtion on the other side of 
the transfer.  on the other side, the ipc function is read off the wire
and the proper call is dispatched.  That function then calls into data.c
again.  Only this time data.c is configured with the local DSI.  so call is
made into local dsi just as before but in a seperate process.

striping
========

