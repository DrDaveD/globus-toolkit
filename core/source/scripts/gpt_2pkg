#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Config;
use Data::Dumper;

#
# Do a perl check for version >= 5.005.  See 'gpt-translate-interpreter' should you
# need to alter the invocation path to a valid perl interpreter in the GPT front-end
# programs.
#

if ( ! ( defined eval "require 5.005" ) )
{
    die "GPT requires at least Perl version 5.005";
}

my $gpath = $ENV{GPT_LOCATION};

if (!defined($gpath))
{
  $gpath = $ENV{GLOBUS_LOCATION};

}

if (!defined($gpath))
{
   die "GPT_LOCATION or GLOBUS_LOCATION needs to be set before running this script"
}

@INC = ("$gpath/lib/perl", "$gpath/lib/perl/$Config{'archname'}", @INC);

if ( ! ( defined eval "require Grid::GPT::GPTObject" ) )
{
    die("$gpath does not appear to hold a valid GPT installation\n");
}


my $prefix = $gpath;

my $VERSION = 0.01;
my $srcfile;
my $outfile = '';
my $verbose = 0;
my ($help, $man);
my $cflagslist;
my $includeslist;
my $libslist;
my $pkglibslist;
my $pgm_linkslist;
my $lib_linkslist;

GetOptions( 'src=s'=> \$srcfile, 
            'o=s' => \$outfile, 
	    'help' => \$help) 
  or Pod::Usage::pod2usage(1);

Pod::Usage::pod2usage(0) if $help;

#die "ERROR: need a source packaging data file\n",Pod::Usage::pod2usage(1) if !defined $srcfile;

require Grid::GPT::Installation;
require Grid::GPT::PackageFactory;
require Grid::GPT::BuildLine;
use Cwd;

# sub pod2usage {
#   print "gpt-build-config [-verbose -help  -o=output ] -src=src_metadata_file\n";
# }

my $factory = new Grid::GPT::PackageFactory;

my $pkg = $factory->type_of_package($srcfile);

$pkg->read_metadata_file($srcfile);

my %deps;
for my $dep (@{$pkg->{'Source_Dependencies'}{'deps'}}) {
   next if ($dep->{'deptype'} ne 'compile');
   $deps{$dep->{'pkgname'}} = $dep->{'versions'}[0]->{'major'};
}

my $name = $pkg->{'Name'};
$name =~ tr/_/-/;

if ($outfile eq '') {
  $outfile = $name . '.pc.in';
}
open (OUT, ">$outfile") or die "ERROR: $outfile could not be opened";


my $description = $pkg->{'Description'};
$description =~ s!^\s+|\s+$!!g;
$description =~ s!\s+! !g;

my $version = $pkg->{'Version'}{'major'} . '.' . $pkg->{'Version'}{'minor'};

my $libs = "-L\${libdir} $pkg->{'pkg_libs'} $pkg->{'external_libs'}";
$libs =~ s!^\s+|\s+$!!g;
$libs =~ s!\s+! !g;

my $cflags = "$pkg->{'cflags'} -I\${includedir}/globus -I\${libdir}/globus/include $pkg->{'external_includes'}";
$cflags =~ s!^\s+|\s+$!!g;
$cflags =~ s!\s+! !g;

print OUT "prefix=\@prefix\@\n";
print OUT "exec_prefix=\@exec_prefix\@\n";
print OUT "libdir=\@exec_prefix\@/lib\n";
print OUT "includedir=\@prefix\@/include\n";
print OUT "\n";
print OUT "Name: $name\n";
print OUT "Description: Globus Toolkit - $description\n";
print OUT "Version: $version\n";
print OUT "Requires:";
while ((my $key, my $value) = each(%deps)) {
    print OUT ($value > 0 ? " $key >= $value" : " $key");
}
print OUT "\n";
print OUT "Libs: $libs\n";
print OUT "Cflags: $cflags\n";

#open (DEBUG, ">/tmp/debuggingoutput") or die "ERROR: debuggingoutput could not be opened";



close OUT;
chmod 0755, $outfile;
exit;

sub print_var {
  my ($name, $value) = @_;
  $value = "" if not defined $value;
  $value  =~ s/\s+/ /g;
  print OUT "$name=\"$value\"\n";
}


__END__

=head1 NAME

B<globus_build_config> - Returns a minimized list of ldflags from a list of globus packages and external libraries.

=head1 SYNOPSIS

globus_build_config -src <source metadata file>  CB-f <globus_flavor_name>  

=head1 DESCRIPTION

B<globus_build_config.pl> creates a file in it's current directory named
gpt_build_temp.sh that contains a list of necessary flags assembled from 
the build environment metadata of the packages on which the source metadata 
depends.  
This scanning is done recursively to cover the entire dependency tree.
This script was initially inspired by the shell script gnome_config.

=head1 LINK ORDER

The flag list returned by B<globus_build_config.pl> is assembled in
dependent order.  A dependency between two libraries occurs when one
library needs the symbols of another library in order to link
correctly.  For most linkers the library providing the symbols has to
be linked after the library that needs the symbols.  For
example, from the line:

   -L/opt/Xpm/lib -lXpm -L/usr/lib/X11 -lXm -lX

B<gpt_build_config> assumes that the library Xpm is dependent on Xm which in turn is dependent on X.  In addition, B<globus_build_config.pl> assumes that Xpm is located in /opt/Xpm/lib and Xm and X are both located in /usr/lib/X11.

=head1 BUGS

Circular dependencies between libraries are not supported.

=head1 AUTHOR

Michael Bletzinger E<lt>mbletzin.ncsa.uiuc.eduE<gt> and Eric Blau
E<lt>eblau.ncsa.uiuc.eduE<gt>

=cut
