link-am:

unlink-am:

filelist-am:

link: link-recursive link-libLTLIBRARIES link-libLIBRARIES link-libexecPROGRAMS link-libexecSCRIPTS link-etcDATA link-binPROGRAMS link-binSCRIPTS link-sbinPROGRAMS link-sbinSCRIPTS link-includeHEADERS link-shareDATA link-setupDATA link-setupPROGRAMS link-setupSCRIPTS link-testDATA link-testPROGRAMS link-testSCRIPTS link-scriptsysconfPROGRAMS link-scriptsysconfSCRIPTS link-flavorincludeHEADERS link-pkgDATA link-aclocalDATA link-doxygenDATA link-docDATA 
	:

unlink: unlink-recursive unlink-libLTLIBRARIES unlink-libLIBRARIES unlink-libexecPROGRAMS unlink-libexecSCRIPTS unlink-etcDATA unlink-binPROGRAMS unlink-binSCRIPTS unlink-sbinPROGRAMS unlink-sbinSCRIPTS unlink-includeHEADERS unlink-shareDATA unlink-setupDATA unlink-setupPROGRAMS unlink-setupSCRIPTS unlink-testDATA unlink-testPROGRAMS unlink-testSCRIPTS unlink-scriptsysconfPROGRAMS unlink-scriptsysconfSCRIPTS unlink-flavorincludeHEADERS unlink-pkgDATA unlink-aclocalDATA unlink-doxygenDATA unlink-docDATA 
	:

.PHONY: link unlink link-recursive unlink-recursive link-am unlink-am filelist-amlink-libLTLIBRARIES unlink-libLTLIBRARIES filelist-libLTLIBRARIES link-libLIBRARIES unlink-libLIBRARIES filelist-libLIBRARIES link-libexecPROGRAMS unlink-libexecPROGRAMS filelist-libexecPROGRAMS link-libexecSCRIPTS unlink-libexecSCRIPTS filelist-libexecSCRIPTS link-etcDATA unlink-etcDATA filelist-etcDATA link-binPROGRAMS unlink-binPROGRAMS filelist-binPROGRAMS link-binSCRIPTS unlink-binSCRIPTS filelist-binSCRIPTS link-sbinPROGRAMS unlink-sbinPROGRAMS filelist-sbinPROGRAMS link-sbinSCRIPTS unlink-sbinSCRIPTS filelist-sbinSCRIPTS link-includeHEADERS unlink-includeHEADERS filelist-includeHEADERS link-shareDATA unlink-shareDATA filelist-shareDATA link-setupDATA unlink-setupDATA filelist-setupDATA link-setupPROGRAMS unlink-setupPROGRAMS filelist-setupPROGRAMS link-setupSCRIPTS unlink-setupSCRIPTS filelist-setupSCRIPTS link-testDATA unlink-testDATA filelist-testDATA link-testPROGRAMS unlink-testPROGRAMS filelist-testPROGRAMS link-testSCRIPTS unlink-testSCRIPTS filelist-testSCRIPTS link-scriptsysconfPROGRAMS unlink-scriptsysconfPROGRAMS filelist-scriptsysconfPROGRAMS link-scriptsysconfSCRIPTS unlink-scriptsysconfSCRIPTS filelist-scriptsysconfSCRIPTS link-flavorincludeHEADERS unlink-flavorincludeHEADERS filelist-flavorincludeHEADERS link-pkgDATA unlink-pkgDATA filelist-pkgDATA link-aclocalDATA unlink-aclocalDATA filelist-aclocalDATA link-doxygenDATA unlink-doxygenDATA filelist-doxygenDATA link-docDATA unlink-docDATA filelist-docDATA 

filelist: filelist-recursive filelist-libLTLIBRARIES filelist-libLIBRARIES filelist-libexecPROGRAMS filelist-libexecSCRIPTS filelist-etcDATA filelist-binPROGRAMS filelist-binSCRIPTS filelist-sbinPROGRAMS filelist-sbinSCRIPTS filelist-includeHEADERS filelist-shareDATA filelist-setupDATA filelist-setupPROGRAMS filelist-setupSCRIPTS filelist-testDATA filelist-testPROGRAMS filelist-testSCRIPTS filelist-scriptsysconfPROGRAMS filelist-scriptsysconfSCRIPTS filelist-flavorincludeHEADERS filelist-pkgDATA filelist-aclocalDATA filelist-doxygenDATA filelist-docDATA 
	:




link-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
	    	target_p=$(DESTDIR)$(libdir)/$$p; \
		target_dir="$(DESTDIR)$(libdir)/"; \
		root_p=`echo $$p | sed "s,.la,,"`; \
		liblist=`ls $$mydir/.libs/$$root_p.so*`; for so in $$liblist; do \
			if test ! -h $$so; then \
				so_name=`echo $$so | sed "s,$$mydir/.libs/,,"`; \
				so_list="$$so_list $$so_name"; \
			fi; \
		done; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
			for so in $$so_list; do \
				echo "mv $$target_dir/$$so $$target_dir/$$so.$(LINK_BAK)"; \
				mv $$target_dir/$$so $$target_dir/$$so.$(LINK_BAK); \
			done; \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
			for so in $$so_list; do \
				echo "ln -s $$mydir/.libs/$$so $$target_dir/$$so"; \
				ln -s $$mydir/.libs/$$so $$target_dir/$$so; \
			done; \
		fi; \
	  else :; fi; \
	done

unlink-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(libdir)/$$p; \
		target_dir="$(DESTDIR)$(libdir)/"; \
		root_p=`echo $$p | sed "s,.la,,"`; \
		so_list=`ls $$target_dir/$$root_p.so*.$(LINK_BAK)`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
			for so in $$so_list; do \
				so_name=`echo $$so | sed "s,.$(LINK_BAK),,"`; \
				echo "rm $$so_name"; \
				rm $$so_name; \
			done; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
			for so in $$so_list; do \
				so_name=`echo $$so | sed "s,.$(LINK_BAK),,"`; \
				mv $$so_name.$(LINK_BAK) $$so_name; \
			done; \
		fi; \
	done

filelist-libLTLIBRARIES:
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  echo "$(DESTDIR)$(libdir)/$$p" >> $(FILELIST_FILE); \
	done





link-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
		mydir=`pwd`; \
		target_p=$(DESTDIR)$(libdir)/$$p; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	  else :; fi; \
	done

unlink-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
		target_p=$(DESTDIR)$(libdir)/$$p; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-libLIBRARIES:
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  echo "$(DESTDIR)$(libdir)/$$p" >> $(FILELIST_FILE); \
	done





link-libexecPROGRAMS: $(libexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(libexecdir)
	@list='$(libexec_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(libexecdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-libexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(libexec_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(libexecdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-libexecPROGRAMS:
	@list='$(libexec_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(libexecdir)/$$p" >> $(FILELIST_FILE); \
	done





link-libexecSCRIPTS: $(libexec_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(libexecdir)
	@list='$(libexec_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(libexecdir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-libexecSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(libexec_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(libexecdir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-libexecSCRIPTS:
	@list='$(libexec_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(libexecdir)/$$p" >> $(FILELIST_FILE); \
	done





link-etcDATA: $(etc_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(etcdir)
	@list='$(etc_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(etcdir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-etcDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(etc_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(etcdir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-etcDATA:
	@list='$(etc_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(etcdir)/$$p" >> $(FILELIST_FILE); \
	done





link-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(bindir)/$$p" >> $(FILELIST_FILE); \
	done





link-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(bindir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(bindir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-binSCRIPTS:
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(bindir)/$$p" >> $(FILELIST_FILE); \
	done





link-sbinPROGRAMS: $(sbin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(sbindir)
	@list='$(sbin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(sbindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-sbinPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(sbindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-sbinPROGRAMS:
	@list='$(sbin_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(sbindir)/$$p" >> $(FILELIST_FILE); \
	done





link-sbinSCRIPTS: $(sbin_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(sbindir)
	@list='$(sbin_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(sbindir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-sbinSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(sbindir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-sbinSCRIPTS:
	@list='$(sbin_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(sbindir)/$$p" >> $(FILELIST_FILE); \
	done





link-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  	mydir=`pwd`; \
		target_p="$(DESTDIR)$(includedir)/$$p"; \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f "$$p"; then d="$$mydir/"; else d="$$fullsrcdir/"; fi; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$d$$p $$target_p"; \
			ln -s $$d$$p $$target_p; \
		fi; \
	done

unlink-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
		target_p="$(DESTDIR)$(includedir)/$$p"; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-includeHEADERS:
	@list='$(include_HEADERS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(includedir)/$$p" >> $(FILELIST_FILE); \
	done





link-shareDATA: $(share_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(sharedir)
	@list='$(share_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(sharedir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-shareDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(share_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(sharedir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-shareDATA:
	@list='$(share_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(sharedir)/$$p" >> $(FILELIST_FILE); \
	done





link-setupDATA: $(setup_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(setupdir)
	@list='$(setup_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(setupdir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-setupDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(setup_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(setupdir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-setupDATA:
	@list='$(setup_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(setupdir)/$$p" >> $(FILELIST_FILE); \
	done





link-setupPROGRAMS: $(setup_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(setupdir)
	@list='$(setup_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(setupdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-setupPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(setup_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(setupdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-setupPROGRAMS:
	@list='$(setup_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(setupdir)/$$p" >> $(FILELIST_FILE); \
	done





link-setupSCRIPTS: $(setup_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(setupdir)
	@list='$(setup_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(setupdir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-setupSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(setup_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(setupdir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-setupSCRIPTS:
	@list='$(setup_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(setupdir)/$$p" >> $(FILELIST_FILE); \
	done





link-testDATA: $(test_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(testdir)
	@list='$(test_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(testdir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-testDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(test_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(testdir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-testDATA:
	@list='$(test_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(testdir)/$$p" >> $(FILELIST_FILE); \
	done





link-testPROGRAMS: $(test_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(testdir)
	@list='$(test_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(testdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-testPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(test_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(testdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-testPROGRAMS:
	@list='$(test_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(testdir)/$$p" >> $(FILELIST_FILE); \
	done





link-testSCRIPTS: $(test_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(testdir)
	@list='$(test_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(testdir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-testSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(test_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(testdir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-testSCRIPTS:
	@list='$(test_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(testdir)/$$p" >> $(FILELIST_FILE); \
	done





link-scriptsysconfPROGRAMS: $(scriptsysconf_PROGRAMS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(scriptsysconfdir)
	@list='$(scriptsysconf_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	  	mydir=`pwd`; \
		target_p=$(DESTDIR)$(scriptsysconfdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else :; fi; \
	done

unlink-scriptsysconfPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(scriptsysconf_PROGRAMS)'; for p in $$list; do \
		target_p=$(DESTDIR)$(scriptsysconfdir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-scriptsysconfPROGRAMS:
	@list='$(scriptsysconf_PROGRAMS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(scriptsysconfdir)/$$p" >> $(FILELIST_FILE); \
	done





link-scriptsysconfSCRIPTS: $(scriptsysconf_SCRIPTS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(scriptsysconfdir)
	@list='$(scriptsysconf_SCRIPTS)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(scriptsysconfdir)/`echo $$p|sed '$(transform)'`; \
	  if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  else if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else :; fi; fi; \
	done

unlink-scriptsysconfSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(scriptsysconf_SCRIPTS)'; for p in $$list; do \
	    	target_p=$(DESTDIR)$(scriptsysconfdir)/`echo $$p|sed '$(transform)'`; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-scriptsysconfSCRIPTS:
	@list='$(scriptsysconf_SCRIPTS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(scriptsysconfdir)/$$p" >> $(FILELIST_FILE); \
	done





link-flavorincludeHEADERS: $(flavorinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(flavorincludedir)
	@list='$(flavorinclude_HEADERS)'; for p in $$list; do \
	  	mydir=`pwd`; \
		target_p="$(DESTDIR)$(flavorincludedir)/$$p"; \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f "$$p"; then d="$$mydir/"; else d="$$fullsrcdir/"; fi; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$d$$p $$target_p"; \
			ln -s $$d$$p $$target_p; \
		fi; \
	done

unlink-flavorincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(flavorinclude_HEADERS)'; for p in $$list; do \
		target_p="$(DESTDIR)$(flavorincludedir)/$$p"; \
		if test -h $$target_p; then \
			echo "rm $$target_p"; \
			rm $$target_p; \
		fi; \
		if test -f $$target_p.$(LINK_BAK); then \
			echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
			mv $$target_p.$(LINK_BAK) $$target_p; \
		fi; \
	done

filelist-flavorincludeHEADERS:
	@list='$(flavorinclude_HEADERS)'; for p in $$list; do \
	  echo "$(DESTDIR)$(flavorincludedir)/$$p" >> $(FILELIST_FILE); \
	done





link-pkgDATA: $(pkg_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(pkgdir)
	@list='$(pkg_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(pkgdir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-pkgDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(pkg_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(pkgdir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-pkgDATA:
	@list='$(pkg_DATA)'; for p in $$list; do \
	  case $$p in \
	      $(FILELIST_FILE) | pkg_data_noflavor_data.gpt ) \
	      echo "$(DESTDIR)$(pkgdir)/$$p" >> $(FILELIST_FILE); \
	    ;; \
	  esac ; \
	done





link-aclocalDATA: $(aclocal_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(aclocaldir)
	@list='$(aclocal_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(aclocaldir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-aclocalDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(aclocal_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(aclocaldir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-aclocalDATA:
	@list='$(aclocal_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(aclocaldir)/$$p" >> $(FILELIST_FILE); \
	done





link-doxygenDATA: $(doxygen_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(doxygendir)
	@list='$(doxygen_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(doxygendir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-doxygenDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(doxygen_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(doxygendir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-doxygenDATA:
	@list='$(doxygen_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(doxygendir)/$$p" >> $(FILELIST_FILE); \
	done





link-docDATA: $(doc_DATA)
	@$(NORMAL_INSTALL)
	@$(mkinstalldirs) $(DESTDIR)$(docdir)
	@list='$(doc_DATA)'; for p in $$list; do \
	  mydir=`pwd`; \
	  target_p=$(DESTDIR)$(docdir)/$$p; \
	  if test -f $(srcdir)/$$p; then \
		cd $(srcdir); \
		fullsrcdir=`pwd`; \
		cd $$mydir; \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$fullsrcdir/$$p $$target_p"; \
			ln -s $$fullsrcdir/$$p $$target_p; \
		fi; \
	  else if test -f $$p; then \
		if test -f $$target_p -a ! -h $$target_p; then \
			echo "mv $$target_p $$target_p.$(LINK_BAK)"; \
			mv $$target_p $$target_p.$(LINK_BAK); \
		fi; \
		if test ! -h $$target_p; then \
			echo "ln -s $$mydir/$$p $$target_p"; \
			ln -s $$mydir/$$p $$target_p; \
		fi; \
	  fi; fi; \
	done

unlink-docDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(doc_DATA)'; for p in $$list; do \
	target_p=$(DESTDIR)$(docdir)/$$p; \
	if test -h $$target_p; then \
		echo "rm $$target_p"; \
		rm $$target_p; \
	fi; \
	if test -f $$target_p.$(LINK_BAK); then \
		echo "mv $$target_p.$(LINK_BAK) $$target_p"; \
		mv $$target_p.$(LINK_BAK) $$target_p; \
	fi; \
	done

filelist-docDATA:
	@list='$(doc_DATA)'; for p in $$list; do \
	  echo "$(DESTDIR)$(docdir)/$$p" >> $(FILELIST_FILE); \
	done


## automake - create Makefile.in from Makefile.am
## Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.
# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

link-recursive unlink-recursive filelist-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
## This trick allows "-k" to keep its natural meaning when running a
## recursive rule.
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

bindist: $(PACKAGE)-$(VERSION)-$(build_triplet).tar.gz

$(PACKAGE)-$(VERSION)-$(build_triplet).tar.gz: all
	destdir=$(PACKAGE)-$(VERSION)-$(build_triplet); \
	rm -rf $(destdir); \
	$(MAKE) install DESTDIR=`pwd`/$$destdir; \
	cat $$destdir/$(pkgdir)/*.filelist | sed -e 's/^\///' \
	| sort -u | (cd binpkgs/$(prefix) && pax -w) | gzip > $$destdir.tar.gz
