#! /usr/bin/env perl

use strict;
use Getopt::Long;

sub commands;

my ($gpt_location, $rpm_info) = ($ENV{'GPT_LOCATION'}, "");
my ($perl_location, $verbose, $boot, $help, $man, $version, $test);

GetOptions( 'with-perl=s'=> \$perl_location,
            'prefix=s'=> \$gpt_location,
            "test!" => \$test,
            "boot!" => \$boot,
            "help!" => \$help,
            "man!" => \$man,
            "verbose!" => \$verbose,
            "version!" => \$version,
          ) or pod2usage(1);

pod2usage(0) if $help;
$verbose=1;


die "Please set \$GPT_LOCATION or use --prefix\n" if ! defined $gpt_location;

use Cwd;

my $topdir = cwd();

@INC = ("./tools", @INC);

require DistGPT;

$perl_location = DistGPT::find_perl(perl_location => $perl_location, 
                                    perl_version => '5.005',
                                   topdir => $topdir);



die "ERROR: Can't find perl >= 5.005. Use -with-perl=<location> flag\n" 
  if ! defined $perl_location;

# Check prerequisite perl modules
my %prereqs = (
    'Archive::Tar' => [0, 22],
    'Compress::Zlib' => [1, 21],
    'Digest::MD5' => [2, 20],
    'File::Spec' => [0, 8],
    'IO::Zlib' => [1, 1],
    'Pod::Parser' => [1, 18],
    'Test::Simple' => [0, 47]);

my $prereq_error = '';
for my $pkg (keys %prereqs)
{
    my $installed_version = eval "require $pkg; return \$${pkg}::VERSION";
    my ($prereq_major, $prereq_minor) = @{$prereqs{$pkg}};
    my ($installed_major, $installed_minor) = split(/\./, $installed_version);

    if ((($installed_major || 0) < $prereq_major) ||
        ((($installed_major || 0) == $prereq_major) && 
         (($installed_minor || 0) < $prereq_minor)))
    {
        if (defined($installed_major))
        {
            $prereq_error .= "Found too-old version of $pkg ($installed_major.$installed_minor).\nVersion $prereq_major.$prereq_minor or greater is required\n";
        }
        else
        {
            $prereq_error .= "Prerequisite package $pkg version $prereq_major.$prereq_minor not found.";
        }
    }
}
die $prereq_error if ($prereq_error ne '');

my $result = DistGPT::find_perl(perl_location => $perl_location, 
                                perl_version => '5.6.1',
                                topdir => $topdir);

if (defined $man) {
  my $podcommand = $perl_location;
  $podcommand =~ s!perl$!pod2text!;
  my $result = system("$podcommand ./build_gpt");
  exit 0;
}

print_version() if $version;


my %builddirections = (
                       'gpt' => 'gpt',
                      );

# Assume -boot if packaging_tools/configure does not exist.

$boot=1 if ! -f "packaging_tools/configure";

my $shutup =" > /dev/null 2>&1";
$shutup = "" if defined $verbose;

$ENV{GPT_LOCATION} = $gpt_location;
delete $ENV{CONFIG_SITE};
my %commands = (
                gpt => ["GPT_LOCATION=$gpt_location; export GPT_LOCATION; \\
./configure --with-perl=$perl_location --datadir='\${prefix}/share' --libexecdir='\${libdir}/globus' --mandir='\${prefix}/share/man'", 
                        "make", 
                        "make install",
                        "make install-man",
                       ],
                
               );
my %boot = (
             gpt => "./bootstrap",
           );

require PkgMngmt::Inform;

my $log = new Grid::GPT::PkgMngmt::Inform(
                                          verbose => $verbose,
                                          name => "build_gpt",
                                         );


$log->announce("installing GPT into $gpt_location");


require DistGPT;

my $dist = new DistGPT(
                       topdir => cwd(),
                       building => 1,
                      );

$dist->match_srcdirs($boot);

for my $s  (@{ $dist->get_keys() }) {

  my $dir = $dist->{'srcdirs'}->{$s};

  my $instructions = $builddirections{$s};
  
  next if $s eq 'perltest' and ! defined $test;

  $log->announce("building $dir");
  
  action($boot{$instructions},$dir) 
    if defined $boot{$instructions} and defined $boot;

  for my $i (@{$commands{$instructions}}) {
    {
      action($i, $dir);
    }
  }
}

sub action {
  my ($command, $dir, $override) = @_;

  my $startdir = cwd();

  my $verbose = $log->{'verbose'};
  $log->{'verbose'} = defined $verbose ? $verbose : $override;

  chdir $dir;
  $log->action($command);
  chdir $startdir;
  $log->{'verbose'} = $verbose;

}

sub print_version {
  open (CFG, 'packaging_tools/configure.ac');
 
  my $version;
  for (<CFG>) {
    if (m!AC_INIT\(\w+,([^,\)]+)!) {
      $version = $1;
      $version =~ s!\s+!!g;
      last;
    }
  }
  close CFG;
  print "Globus Packaging Tools Version $version\n";
  exit 0;
}

sub pod2usage {
  my $ex = shift;
  print "build_gpt [ -with-perl=<path> \\
             -rpminfo=<flags> \\
             -prefix=<path> \\
             -boot \\
             -help \\
             -man \\
             ]\n";
  exit $ex;
}

=head1 NAME

B<build_gpt> - Build GPT Distribution. 

=head1 SYNOPSIS
GetOptions( 'with-perl=s'=> \$perl_location,
            'prefix=s'=> \$gpt_location,
            "test!" => \$test,
            "boot!" => \$boot,
            "help!" => \$help,
            "man!" => \$man,
            "verbose!" => \$verbose,
            "version!" => \$version,

build_gpt [ -with-perl=<path> -prefix=<path> -boot -test -help -man -version -verbose ]

=head1 DESCRIPTION

B<build_gpt> Super script for building the GPT distribution..


=head1 FLAGS

=over 4

=item I<-with-perl=PATH>: Location of the perl (version >= 5.005) executable.

=item I<-prefix>: Installation location.  Default is the value of
$GPT_LOCATION.

=item I<-verbose>: Print copious build messages for diagnostic purposes.

=item I<-boot>: Run autools via the packaging_tools/bootstrap script.

=item I<-test>: Run some Perl module tests after the installation of
each module.  This will also install GPT.

=item I<-help>: Print usage and exit..

=item I<-man>: Print this page and exit..

=back

=cut
