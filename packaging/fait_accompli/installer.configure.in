dnl Intended to be used with a Makefile.in generated from installer.sh
AC_INIT(Globus Toolkit, @version@)
AC_CONFIG_FILES(Makefile config.site)
AC_PREFIX_DEFAULT(/usr/local/globus-@version@)
INSTALLER_ROOT="`pwd`/\$(srcdir)"
AC_SUBST([INSTALLER_ROOT], [$INSTALLER_ROOT])

AC_CANONICAL_BUILD

if test "x$flavor" = "x"; then
   case "$build" in
   i*86-*-*)
      flavor=gcc32dbg
   ;;
   power*-ibm-aix5.*)
      flavor=vendorcc32dbg
      AIX=yes
   ;;
   ppc-*-*-*)
      flavor=gcc32dbg
   ;;
   power*-apple-darwin*)
      flavor=gcc32dbg
   ;;
   sparc-sun-solaris*)
      flavor=gcc32dbg
   ;;
   sparc64-*-*)
      flavor=gcc64dbg
   ;;
   ia64-*-*)
      flavor=gcc64dbg
   ;; 
   x86_64-*-*-*)
      flavor=gcc64dbg
   ;;
   amd64-*-*)
      flavor=gcc64dbg
   ;;
   s390-ibm-linux-*)
      flavor=gcc32dbg
   ;;
   alphaev*-dec-osf*)
      flavor=vendorcc64dbg
   ;;
   esac
fi

AC_ARG_WITH(flavor, AC_HELP_STRING([--with-flavor=flavor],\
   [Use flavor as the base for GPT builds.]),
   [flavor=$withval], [])

if test "x$flavor" = "x"; then
   echo "Unable to guess flavor. Please use --with-flavor= to specify one"
   echo Use gcc as a prefix if you build with gcc, vendorcc if you build with cc
   echo Use 32 in the middle if you build 32bit, 64 if you build 64 bit.
   echo Add dbg if you want them built with debugging.
   echo
   echo So, gcc32dbg or vendorcc64 are both examples of valid flavors.

   exit 1
fi
AC_SUBST(flavor, $flavor)

# Linux FHS 2.3 6.1.5: /lib64 and /lib32
# The 64-bit architectures PPC64, s390x, sparc64 and AMD64 must place 64-bit
# libraries in /lib64, and 32-bit (or 31-bit on s390) libraries in /lib.
# The 64-bit architecture IA64 must place 64-bit libraries in /lib.

case "$flavor" in
    *32*)
        case "$build" in
            powerpc64*linux* | s390*linux* | sparc64*linux* | x86_64*linux* )
                libdir='${exec_prefix}/lib'
                ;;
            ia64*linux*)
                libdir='${exec_prefix}/lib32'
                ;;
        esac
        ;;
    *64*)
        case "$build" in 
            powerpc64*linux* | s390*linux* | sparc64*linux* | x86_64*linux* )
                libdir='${exec_prefix}/lib64'
                ;;
            ia64*linux*)
                libdir='${exec_prefix}/lib'
                ;;
        esac
        ;;
esac

aixargs=""
if test "x$AIX" = "xyes"; then
    case $flavor in
        *64*)
            aixargs="export OBJECT_MODE=64"
            ;;
        *32*)
            aixargs="export OBJECT_MODE=32"
            ;;
    esac
fi
AC_SUBST(aixargs,$aixargs)

openssl="globus_system_openssl"
AC_SUBST(globus_openssl, $openssl)

AC_ARG_WITH(versionname, AC_HELP_STRING([--with-versionname="packager"],\
   [The name to be displayed by globus-version.  Default is "Globus Toolkit".]),
\
   [versionname=$withval], [])
AC_SUBST(versionname, $versionname)
AC_SUBST(versionnum, [@version@])

AC_ARG_WITH(buildopts, AC_HELP_STRING([--with-buildopts="args"],\
   [Arguments to pass to gpt-build, like "--verbose" or "--force".]),\
   [buildopts=$withval], [])
AC_SUBST(buildopts, $buildopts)

AC_ARG_WITH(gptlocation, AC_HELP_STRING([--with-gptlocation=dir],\
   [If you want to install GPT into an alternate directory.]),\
   [gptlocation=$withval], [if test x$prefix = "xNONE"; then\
   gptlocation=$ac_default_prefix; else gptlocation=$prefix; fi])
AC_SUBST(gptlocation, $gptlocation)
dnl AC_SUBST(globusloc, prefix)
dnl Pre-webservices code
AC_ARG_WITH(iodbc-includes, AC_HELP_STRING([--with-iodbc-includes=dir],\
   [Specify where to find [IODBC] include files.  [IODBC] and unixODBC are optional for [RLS] builds.]),
   [[GLOBUS_IODBC_INCLUDES]=$withval], [])
AC_SUBST(globus_iodbc_includes, $[GLOBUS_IODBC_INCLUDES])
AC_ARG_WITH(iodbc-libs, AC_HELP_STRING([--with-iodbc-libs=dir],\
   [Specify where to find [IODBC] libraries.  [IODBC] and unixODBC are optional for [RLS] builds.]),
   [[GLOBUS_IODBC_LIBS]=$withval], [])
AC_SUBST(globus_iodbc_libs, $[GLOBUS_IODBC_LIBS])
AC_ARG_WITH(unixodbc-includes, AC_HELP_STRING([--with-unixodbc-includes=dir],\
   [Specify where to find unixODBC include files.  [IODBC] and unixODBC are optional for [RLS] builds.]),
   [[GLOBUS_UNIXODBC_INCLUDES]=$withval], [])
AC_SUBST(globus_unixodbc_includes, $[GLOBUS_UNIXODBC_INCLUDES])
AC_ARG_WITH(unixodbc-libs, AC_HELP_STRING([--with-unixodbc-libs=dir],\
   [Specify where to find unixODBC libraries.  [IODBC] and unixODBC are optional for [RLS] builds.]),
   [[GLOBUS_UNIXODBC_LIBS]=$withval], [])
AC_SUBST(globus_unixodbc_libs, $[GLOBUS_UNIXODBC_LIBS])

i18n=" "
AC_ARG_ENABLE(i18n, AC_HELP_STRING([--enable-i18n],\
   [Enable internationalization.  Default is disabled.]),
   [if test $enableval = "yes"; then i18n="i18n"; fi],
   [])
AC_SUBST(i18n, $i18n)

AC_ARG_WITH(gsiopensshargs, AC_HELP_STRING([--with-gsiopensshargs="args"],\
   [Arguments to pass to the build of GSI-OpenSSH, like --with-tcp-wrappers]),
   [gsiopensshargs="$withval"], [gsiopensshargs="--without-zlib-version-check"])
AC_SUBST(gsiopensshargs, $gsiopensshargs)

netlogger=""
AC_ARG_ENABLE(netlogger, AC_HELP_STRING([--enable-netlogger],\
   [Build netlogger libraries.  Default is disabled.]),
   [if test $enableval = "yes"; then netlogger="globus_xio_netlogger_driver"; fi], [])
AC_SUBST(netlogger, $netlogger)

AC_OUTPUT

