#! /bin/sh

set -e
set -x

usage()
{
    echo "Usage: $0 -n OSNAME -v OSVER [-a ARTIFACTROOT] [-S] [-t TAG]"
}

umask 022

PATH=$PATH:/usr/sbin:/sbin

if expr "$0" : / > /dev/null; then
    bamboodir="$(dirname "$0")"
else
    bamboodir="$(pwd)/bamboo-scripts"
fi

cd "$bamboodir"
cd ..

packagingdir=$(pwd)
topdir=${packagingdir}/rpmbuild
tmppath=${packagingdir}/tmp
artifactroot=""
globusversion=""
skip_checkout=""
skip_bootstrap=""
skip_packaging=""

sign=1
tag=""
while getopts n:v:a:St:hg:qp i; do
    case "$i" in
        n)
            osname="$OPTARG"
            ;;
        v)
            osver="$OPTARG"
            ;;
        a)
            artifactroot="$OPTARG"
            ;;
	S)
	   sign=0 
	    ;;
        t)
           tag="$OPTARG"
           ;;
        h)
           usage
           exit 0
           ;;
        g)
           if ! expr "$OPTARG" : "[0-9]*\.[0-9]*\.[0-9]*" > /dev/null; then
               echo "Invalid GT version $OPTARG" 1>&2
               exit 1
           fi
           globusversion="$OPTARG"
           ;;
        q)
           skip_checkout=1
           skip_bootstrap=1
           ;;
        p)
           skip_checkout=1
           skip_bootstrap=1
           skip_packaging=1
           ;;
    esac
done

shift $(($OPTIND - 1))

if [ "$osname" = "" -o "$osver" = "" ]; then
    usage 1>&2
    exit 1
fi

mkdir -p $topdir
if [ "$sign" = 1 ]; then
    # Copy GPG keyring to $topdir
    cp -R $HOME/.gnupg $topdir/.gnupg
fi

# Fedora 13's version of LaTeX is > 5 years old. It returns non-zero on
# exit the first time it runs. We work around that by running it once in the
# OS image, and then copying the generated output into the new home dir for
# this build
for x in "${HOME}"/.texlive*; do
    if [ -d "${x}" ]; then
        cp -R "${x}" "${topdir}"
    fi
done

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

mkdir -p $tmppath
for x in BUILD  BUILDROOT SOURCES RPMS  SPECS  SRPMS; do
    rm -rf $topdir/$x
    mkdir -p $topdir/$x
done

# Fedora 13
# enable build of 32-bit executables on 64-bit linux (if compilers are present)
# /usr/lib/rpm/config defines this with -march=i686 but no -m32, so the build
# fails (trying to build a 64-bit i686 executable)
cat <<EOF >> $topdir/.rpmrc
optflags: i686 -O2 -g -m32 -march=i686 -mtune=generic -fasynchronous-unwind-tables
EOF

target32=i686-redhat-linux

if grep -Eq 'CentOS|Scientific Linux|Red Hat Enterprise Linux' /etc/redhat-release
then
    target32=i386-redhat-linux
    echo "%rhel                  5" >> $topdir/.rpmmacros
fi

# Enable building of RPM packages in $topdir
cat <<EOF >> $topdir/.rpmmacros
%_topdir               $topdir
%_tmppath              $tmppath
# Override this, as it breaks documentation dependencies in some of the builds 
%_excludedocs 0
EOF

if [ -n "$globusversion" ]; then
    echo "%globus_version	$globusversion" >> "$topdir/.rpmmacros"
fi

if [ "$sign" = 1 ]; then
    cat <<EOF >> $topdir/.rpmmacros
%_signature gpg
%_gpg_name Globus
EOF
fi

# Remove everything prior to building
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo yum -y remove $pkgs_to_rm < /dev/null
fi

bundles=globus-data-management-server,globus-data-management-client,globus-data-management-sdk,globus-resource-management-server,globus-resource-management-client,globus-resource-management-sdk,gram5-condor,gram5-pbs,gram5-sge,globus-simple-ca
packages_to_build=myproxy,gsi_openssh,globus_gram_audit
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/check-gpt-prereqs
if [ -d ${packagingdir}/source-trees/gssapi-openssh ]; then
    cd ${packagingdir}/source-trees/gssapi-openssh 
    cvs update -Pd -r GPT-branch openssh
    cd -
fi
if [ -d ${packagingdir}/source-trees/gssapi-openssh/setup ]; then
    chmod  a+x ${packagingdir}/source-trees/gssapi-openssh/setup/make_gpt_dist
    chmod  a+x ${packagingdir}/source-trees/gssapi-openssh/setup/setup-openssh
fi

[ ! -d source-trees ] || find source-trees -name bootstrap -exec chmod a+x {} +

packages="$(./make-packages.pl -faster -a -lp -deps -deporder -bundles=$bundles -packages=$packages_to_build ${tag:+-t "${tag}"} ${skip_checkout:+-no-updates} \
    ${skip_bootstrap:+-ab} -order-include-runtime-deps | \
    awk "/at version/ { gsub(/_/, \"-\", \$1); print \$1 }")"

if [ -z "$skip_packaging" ]; then
    ./make-packages.pl -faster -no-updates ${skip_bootstrap:+-ab} -a -deps -deporder -bundles=$bundles -packages=$packages_to_build -a -flavor=gcc64dbg
fi

cd gpt-*/packaging_tools
sh ./bootstrap
make dist
# Copy source tarballs into the rpmbuild source directory
cp gpt-3.*.tar.gz ../../package-output/
cp ../../package-output/* $HOME/SOURCES

cd ../..

# Build source packages from spec files
cd fedora
for i in *.spec; do rpmbuild -bs --nodeps $i; done

for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-libs-[0-9]*rpm" -o \
                             -name "$i-admin-[0-9]*rpm" -o \
                             -name "$i-server-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm" -o \
                             -name "$i-setup-poll-[0-9]*rpm" )"
        
        # Don't install LRM RPMs on build machine necessarily
        if ! echo "$i" | grep -qE 'condor|pbs|sge|gram-audit'; then
            sudo rpm -i $rpms < /dev/null;
        fi
    fi
done

# Remove everything prior to building
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo yum -y remove $pkgs_to_rm < /dev/null
fi

# Move rpms out of the way so that find can work when installing.
cd $topdir
mv RPMS RPMS.x86_64
mkdir RPMS

pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|^gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo yum -y remove $pkgs_to_rm < /dev/null
fi
for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --target $target32 \
                 --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-libs-[0-9]*rpm" -o \
                             -name "$i-admin-[0-9]*rpm" -o \
                             -name "$i-server-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm" -o \
                             -name "$i-setup-poll-[0-9]*rpm" )"
        
        # Don't install LRM RPMs on build machine necessarily
        if ! echo "$i" | grep -qE 'condor|pbs|sge|gram-audit'; then
            sudo rpm -i $rpms < /dev/null;
        fi
    fi
done

cd $topdir

mv RPMS.x86_64/x86_64 RPMS
mv RPMS.x86_64/noarch/* RPMS/x86_64

if [ "$sign" = 1 ]; then
    find RPMS -name '*.rpm' -exec expect ${bamboodir}/sign-rpm {} \;
    find SRPMS -name '*.rpm' -exec expect ${bamboodir}/sign-rpm {} \;
fi

# Create yum repo configuration package that includes the path to the
# yum repositories and the public GPG key
sh ${bamboodir}/create-repo-pkg -n "${osname}" -v "${osver}" \
    ${globusversion:+-g "$globusversion"}
if test "$artifactroot" != ""; then
    sh ${bamboodir}/create-repo-pkg -n "${osname}" -v "${osver}" \
    -b "$artifactroot/repo/\$osname/\\\$releasever/\\\$basearch/" \
    -s "$artifactroot/repo/\$osname/\\\$releasever/SRPMS/" \
    -r Globus-bamboo-config
fi

reporoot="${topdir}/repo"
repodir="${reporoot}/${osname}/${osver}"

# Generate YUM repositories for the different package types
mkdir -p "${repodir}"
cp -R RPMS/x86_64 "${repodir}"
mkdir "${repodir}"/i386
cp -R RPMS/i?86/* "${repodir}"/i386

cp RPMS/noarch/*.rpm "${repodir}"/x86_64/
cp RPMS/noarch/*.rpm "${repodir}"/i386/

if grep -Eq 'Scientific Linux|Red Hat Enterprise Linux' /etc/redhat-release
then
    cp RPMS/i?86/*.rpm "${repodir}"/x86_64/
fi
cp -R SRPMS "${repodir}"

# Generate group definition for globus-gridftp
cat > globus.xml <<EOF
<comps>
  <group>
    <id>globus-gridftp</id>
    <name>globus-gridftp</name>
    <default>true</default>
    <description>Globus GridFTP Server and Client RPMS</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-gridftp-server-progs</packagereq>
      <packagereq type="default">globus-gass-copy-progs</packagereq>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-proxy-utils</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-data-management-server</id>
    <name>globus-data-management-server</name>
    <default>true</default>
    <description>Globus Data Management Server</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gfork-progs</packagereq>
      <packagereq type="default">globus-xio-pipe-driver</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-ftp-control</packagereq>
      <packagereq type="default">globus-authz-callout-error</packagereq>
      <packagereq type="default">globus-authz</packagereq>
      <packagereq type="default">globus-usage</packagereq>
      <packagereq type="default">globus-xioperf</packagereq>
      <packagereq type="default">globus-gridftp-server-progs</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-data-management-client</id>
    <name>globus-data-management-client</name>
    <default>true</default>
    <description>Globus Data Management Client</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-ftp-client</packagereq>
      <packagereq type="default">globus-gass-copy-progs</packagereq>
      <packagereq type="default">globus-proxy-utils-progs</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-data-management-sdk</id>
    <name>globus-data-management-sdk</name>
    <default>true</default>
    <description>Globus Data Management SDK</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">grid-packaging-tools</packagereq>
      <packagereq type="default">globus-core</packagereq>
      <packagereq type="default">globus-common</packagereq>
      <packagereq type="default">globus-common-devel</packagereq>
      <packagereq type="default">globus-common-doc</packagereq>
      <packagereq type="default">globus-xio</packagereq>
      <packagereq type="default">globus-xio-devel</packagereq>
      <packagereq type="default">globus-xio-doc</packagereq>
      <packagereq type="default">globus-gsi-openssl-error</packagereq>
      <packagereq type="default">globus-gsi-openssl-error-devel</packagereq>
      <packagereq type="default">globus-gsi-openssl-error-doc</packagereq>
      <packagereq type="default">globus-gsi-proxy-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl-doc</packagereq>
      <packagereq type="default">globus-openssl-module</packagereq>
      <packagereq type="default">globus-openssl-module-devel</packagereq>
      <packagereq type="default">globus-openssl-module-doc</packagereq>
      <packagereq type="default">globus-gsi-cert-utils</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-devel</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-doc</packagereq>
      <packagereq type="default">globus-gsi-sysconfig</packagereq>
      <packagereq type="default">globus-gsi-sysconfig-devel</packagereq>
      <packagereq type="default">globus-gsi-sysconfig-doc</packagereq>
      <packagereq type="default">globus-callout</packagereq>
      <packagereq type="default">globus-callout-devel</packagereq>
      <packagereq type="default">globus-callout-doc</packagereq>
      <packagereq type="default">globus-gsi-callback</packagereq>
      <packagereq type="default">globus-gsi-callback-devel</packagereq>
      <packagereq type="default">globus-gsi-callback-doc</packagereq>
      <packagereq type="default">globus-gsi-credential</packagereq>
      <packagereq type="default">globus-gsi-credential-devel</packagereq>
      <packagereq type="default">globus-gsi-credential-doc</packagereq>
      <packagereq type="default">globus-gsi-proxy-core</packagereq>
      <packagereq type="default">globus-gsi-proxy-core-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-core-doc</packagereq>
      <packagereq type="default">globus-gssapi-gsi</packagereq>
      <packagereq type="default">globus-gssapi-gsi-devel</packagereq>
      <packagereq type="default">globus-gssapi-gsi-doc</packagereq>
      <packagereq type="default">globus-gss-assist</packagereq>
      <packagereq type="default">globus-gss-assist-devel</packagereq>
      <packagereq type="default">globus-gss-assist-doc</packagereq>
      <packagereq type="default">globus-gssapi-error</packagereq>
      <packagereq type="default">globus-gssapi-error-devel</packagereq>
      <packagereq type="default">globus-gssapi-error-doc</packagereq>
      <packagereq type="default">globus-xio-gsi-driver</packagereq>
      <packagereq type="default">globus-xio-gsi-driver-devel</packagereq>
      <packagereq type="default">globus-xio-gsi-driver-doc</packagereq>
      <packagereq type="default">globus-io</packagereq>
      <packagereq type="default">globus-io-devel</packagereq>
      <packagereq type="default">globus-io-doc</packagereq>
      <packagereq type="default">globus-gass-transfer</packagereq>
      <packagereq type="default">globus-gass-transfer-devel</packagereq>
      <packagereq type="default">globus-gass-transfer-doc</packagereq>
      <packagereq type="default">globus-ftp-control</packagereq>
      <packagereq type="default">globus-ftp-control-devel</packagereq>
      <packagereq type="default">globus-ftp-control-doc</packagereq>
      <packagereq type="default">globus-xio-popen-driver</packagereq>
      <packagereq type="default">globus-xio-popen-driver-devel</packagereq>
      <packagereq type="default">globus-xio-popen-driver-doc</packagereq>
      <packagereq type="default">globus-ftp-client</packagereq>
      <packagereq type="default">globus-ftp-client-devel</packagereq>
      <packagereq type="default">globus-ftp-client-doc</packagereq>
      <packagereq type="default">globus-gass-copy</packagereq>
      <packagereq type="default">globus-gass-copy-devel</packagereq>
      <packagereq type="default">globus-gass-copy-doc</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-gsi</id>
    <name>globus-gsi</name>
    <default>true</default>
    <description>Globus GSI Security Tools</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-proxy-utils-progs</packagereq>
      <packagereq type="default">globus-user-env</packagereq>
      <packagereq type="default">globus-simple-ca</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-gram5</id>
    <name>globus-gram5</name>
    <default>true</default>
    <description>Globus GRAM5 Server and Client RPMS</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-gatekeeper</packagereq>
      <packagereq type="default">globus-gram-job-manager</packagereq>
      <packagereq type="default">globus-gram-job-manager-fork-setup-poll</packagereq>
      <packagereq type="default">globus-gram-client-tools</packagereq>
      <packagereq type="default">globus-gass-cache-program</packagereq>
      <packagereq type="default">globus-gass-server-ez-progs</packagereq>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-proxy-utils</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-resource-management-server</id>
    <name>globus-resource-management-server</name>
    <default>true</default>
    <description>Globus Resource Management Server</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-core</packagereq>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-callout</packagereq>
      <packagereq type="default">globus-gram-job-manager-fork-setup-poll</packagereq>
      <packagereq type="default">globus-gass-cache</packagereq>
      <packagereq type="default">globus-gsi-openssl-error</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl</packagereq>
      <packagereq type="default">globus-rsl</packagereq>
      <packagereq type="default">globus-openssl-module</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-simple-ca</packagereq>
      <packagereq type="default">globus-gsi-sysconfig</packagereq>
      <packagereq type="default">globus-gsi-callback</packagereq>
      <packagereq type="default">globus-gsi-credential</packagereq>
      <packagereq type="default">globus-gsi-proxy-core</packagereq>
      <packagereq type="default">globus-gssapi-gsi</packagereq>
      <packagereq type="default">globus-proxy-utils</packagereq>
      <packagereq type="default">globus-gss-assist</packagereq>
      <packagereq type="default">globus-gatekeeper</packagereq>
      <packagereq type="default">globus-xio</packagereq>
      <packagereq type="default">globus-xio-gsi-driver</packagereq>
      <packagereq type="default">globus-io</packagereq>
      <packagereq type="default">globus-gssapi-error</packagereq>
      <packagereq type="default">globus-ftp-control</packagereq>
      <packagereq type="default">globus-gass-transfer</packagereq>
      <packagereq type="default">globus-gram-protocol</packagereq>
      <packagereq type="default">globus-xio-popen-driver</packagereq>
      <packagereq type="default">globus-ftp-client</packagereq>
      <packagereq type="default">globus-gass-server-ez-progs</packagereq>
      <packagereq type="default">globus-gram-client</packagereq>
      <packagereq type="default">globus-gass-copy-progs</packagereq>
      <packagereq type="default">globus-gass-cache-program</packagereq>
      <packagereq type="default">globus-gram-job-manager-callout-error</packagereq>
      <packagereq type="default">globus-gram-job-manager-scripts</packagereq>
      <packagereq type="default">globus-scheduler-event-generator</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-resource-management-client</id>
    <name>globus-resource-management-client</name>
    <default>true</default>
    <description>Globus Resource Management Client</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-core</packagereq>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-callout</packagereq>
      <packagereq type="default">globus-gsi-openssl-error</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl</packagereq>
      <packagereq type="default">globus-rsl</packagereq>
      <packagereq type="default">globus-openssl-module</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-simple-ca</packagereq>
      <packagereq type="default">globus-gsi-sysconfig</packagereq>
      <packagereq type="default">globus-gsi-callback</packagereq>
      <packagereq type="default">globus-gsi-credential</packagereq>
      <packagereq type="default">globus-gsi-proxy-core</packagereq>
      <packagereq type="default">globus-gssapi-gsi</packagereq>
      <packagereq type="default">globus-proxy-utils</packagereq>
      <packagereq type="default">globus-gss-assist</packagereq>
      <packagereq type="default">globus-xio</packagereq>
      <packagereq type="default">globus-xio-gsi-driver</packagereq>
      <packagereq type="default">globus-io</packagereq>
      <packagereq type="default">globus-gssapi-error</packagereq>
      <packagereq type="default">globus-gass-transfer</packagereq>
      <packagereq type="default">globus-gram-protocol</packagereq>
      <packagereq type="default">globus-gass-server-ez-progs</packagereq>
      <packagereq type="default">globus-gram-client</packagereq>
      <packagereq type="default">globus-gram-client-tools</packagereq>
    </packagelist>
  </group>

  <group>
    <id>globus-resource-management-sdk</id>
    <name>globus-resource-management-sdk</name>
    <default>true</default>
    <description>Globus Resource Management SDK</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-core</packagereq>
      <packagereq type="default">globus-common</packagereq>
      <packagereq type="default">globus-common-devel</packagereq>
      <packagereq type="default">globus-common-doc</packagereq>
      <packagereq type="default">globus-callout</packagereq>
      <packagereq type="default">globus-callout-devel</packagereq>
      <packagereq type="default">globus-callout-doc</packagereq>
      <packagereq type="default">globus-gass-cache</packagereq>
      <packagereq type="default">globus-gass-cache-devel</packagereq>
      <packagereq type="default">globus-gass-cache-doc</packagereq>
      <packagereq type="default">globus-gsi-openssl-error</packagereq>
      <packagereq type="default">globus-gsi-openssl-error-devel</packagereq>
      <packagereq type="default">globus-gsi-openssl-error-doc</packagereq>
      <packagereq type="default">globus-gsi-proxy-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-ssl-doc</packagereq>
      <packagereq type="default">globus-rsl</packagereq>
      <packagereq type="default">globus-rsl-devel</packagereq>
      <packagereq type="default">globus-rsl-doc</packagereq>
      <packagereq type="default">globus-openssl-module</packagereq>
      <packagereq type="default">globus-openssl-module-devel</packagereq>
      <packagereq type="default">globus-openssl-module-doc</packagereq>
      <packagereq type="default">globus-gsi-cert-utils</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-devel</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-doc</packagereq>
      <packagereq type="default">globus-simple-ca</packagereq>
      <packagereq type="default">globus-gsi-sysconfig</packagereq>
      <packagereq type="default">globus-gsi-sysconfig-devel</packagereq>
      <packagereq type="default">globus-gsi-sysconfig-doc</packagereq>
      <packagereq type="default">globus-gsi-callback</packagereq>
      <packagereq type="default">globus-gsi-callback-devel</packagereq>
      <packagereq type="default">globus-gsi-callback-doc</packagereq>
      <packagereq type="default">globus-gsi-credential</packagereq>
      <packagereq type="default">globus-gsi-credential-devel</packagereq>
      <packagereq type="default">globus-gsi-credential-doc</packagereq>
      <packagereq type="default">globus-gsi-proxy-core</packagereq>
      <packagereq type="default">globus-gsi-proxy-core-devel</packagereq>
      <packagereq type="default">globus-gsi-proxy-core-doc</packagereq>
      <packagereq type="default">globus-gssapi-gsi</packagereq>
      <packagereq type="default">globus-gssapi-gsi-devel</packagereq>
      <packagereq type="default">globus-gssapi-gsi-doc</packagereq>
      <packagereq type="default">globus-gss-assist</packagereq>
      <packagereq type="default">globus-gss-assist-devel</packagereq>
      <packagereq type="default">globus-gss-assist-doc</packagereq>
      <packagereq type="default">globus-xio</packagereq>
      <packagereq type="default">globus-xio-devel</packagereq>
      <packagereq type="default">globus-xio-doc</packagereq>
      <packagereq type="default">globus-xio-gsi-driver</packagereq>
      <packagereq type="default">globus-xio-gsi-driver-devel</packagereq>
      <packagereq type="default">globus-xio-gsi-driver-doc</packagereq>
      <packagereq type="default">globus-io</packagereq>
      <packagereq type="default">globus-io-devel</packagereq>
      <packagereq type="default">globus-io-doc</packagereq>
      <packagereq type="default">globus-gssapi-error</packagereq>
      <packagereq type="default">globus-gssapi-error-devel</packagereq>
      <packagereq type="default">globus-gssapi-error-doc</packagereq>
      <packagereq type="default">globus-ftp-control</packagereq>
      <packagereq type="default">globus-ftp-control-devel</packagereq>
      <packagereq type="default">globus-ftp-control-doc</packagereq>
      <packagereq type="default">globus-gass-transfer</packagereq>
      <packagereq type="default">globus-gass-transfer-devel</packagereq>
      <packagereq type="default">globus-gass-transfer-doc</packagereq>
      <packagereq type="default">globus-gram-protocol</packagereq>
      <packagereq type="default">globus-gram-protocol-devel</packagereq>
      <packagereq type="default">globus-gram-protocol-doc</packagereq>
      <packagereq type="default">globus-xio-popen-driver</packagereq>
      <packagereq type="default">globus-xio-popen-driver-devel</packagereq>
      <packagereq type="default">globus-ftp-client</packagereq>
      <packagereq type="default">globus-ftp-client-devel</packagereq>
      <packagereq type="default">globus-ftp-client-doc</packagereq>
      <packagereq type="default">globus-gass-server-ez</packagereq>
      <packagereq type="default">globus-gass-server-ez-devel</packagereq>
      <packagereq type="default">globus-gram-client</packagereq>
      <packagereq type="default">globus-gram-client-devel</packagereq>
      <packagereq type="default">globus-gram-client-doc</packagereq>
    </packagelist>
  </group>
</comps>
EOF

createrepo "${reporoot}/$osname/$osver/SRPMS"
createrepo -g "$(pwd)/globus.xml" "${reporoot}/$osname/$osver/x86_64"
createrepo -g "$(pwd)/globus.xml" "${reporoot}/$osname/$osver/i386"

# Export the package lists for the full set of RPMS we generated (64- and
# 32-bit forms)
allpkgs64="$(find "${reporoot}/${osname}/${osver}/"x86_64 -name '*.rpm' | \
    grep -v '\.i386\.rpm' | \
    sed -e 's|.*/||' -e 's|\.rpm||')"
allpkgs32="$(find "${reporoot}/${osname}/${osver}/"i386 -name '*.rpm' | \
    sed -e 's|.*/||' -e 's|\.rpm||')"

echo "$allpkgs32" > packages.gcc32
echo "$allpkgs64" > packages.gcc64

# Remove what we built
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo yum -y remove $pkgs_to_rm  < /dev/null
fi
