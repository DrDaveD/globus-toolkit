#! /bin/sh

set -e

usage()
{
    echo "Usage: $0 -n OSNAME -v OSVER [-a ARTIFACTROOT] [-S] [-t TAG]"
}

umask 022

PATH=$PATH:/usr/sbin:/sbin

bamboodir=$(pwd)/bamboo-scripts
topdir=$(pwd)/rpmbuild
tmppath=$(pwd)/tmp
artifactroot=""
args=$(getopt n:v:a:St:hg: $*)
globusversion=""
set -- ${args}

sign=1
tag=""
for i; do
    case "$i" in
        -n)
            osname="$2"
            shift
            shift
            ;;
        -v)
            osver="$2"
            shift
            shift
            ;;
        -a)
            artifactroot="$2"
            shift
            shift
            ;;
	-S)
	   sign=0 
	   shift
	    ;;
        -t)
           tag="$2"
           shift 2
           ;;
        -h)
           usage
           exit 0
           ;;
        -g)
           if ! expr "$2" : "[0-9]*\.[0-9]*\.[0-9]*" > /dev/null; then
               echo "Invalid GT version $2" 1>&2
               exit 1
           fi
           globusversion="$2"
           shift 2
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$osname" = "" -o "$osver" = "" ]; then
    usage 1>&2
    exit 1
fi

mkdir -p $topdir
if [ "$sign" = 1 ]; then
    # Copy GPG keyring to $topdir
    cp -R $HOME/.gnupg $topdir/.gnupg
fi

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

mkdir -p $tmppath
for x in BUILD  BUILDROOT SOURCES RPMS  SPECS  SRPMS; do
    mkdir -p $topdir/$x
done

# Fedora 13
# enable build of 32-bit executables on 64-bit linux (if compilers are present)
# /usr/lib/rpm/config defines this with -march=i686 but no -m32, so the build
# fails (trying to build a 64-bit i686 executable)
cat <<EOF >> $topdir/.rpmrc
optflags: i686 -O2 -g -m32 -march=i686 -mtune=generic -fasynchronous-unwind-tables
EOF

target32=i686-redhat-linux

if grep -Eq 'CentOS|Scientific Linux|Red Hat Enterprise Linux' /etc/redhat-release
then
    target32=i386-redhat-linux
    echo "%rhel                  5" >> $topdir/.rpmmacros
fi

# Enable building of RPM packages in $topdir
cat <<EOF >> $topdir/.rpmmacros
%_topdir               $topdir
%_tmppath              $tmppath
# Override this, as it breaks documentation dependencies in some of the builds 
%_excludedocs 0
EOF

if [ -n "$globusversion" ]; then
    echo "%globus_version	$globusversion" >> "$topdir/.rpmmacros"
fi

if [ "$sign" = 1 ]; then
    cat <<EOF >> $topdir/.rpmmacros
%_signature gpg
%_gpg_name Globus
EOF
fi

# Remove everything prior to building
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo rpm --noscripts -e --allmatches $pkgs_to_rm < /dev/null
fi

bundles=globus-data-management-server,globus-data-management-client,globus-data-management-sdk,globus-simple-ca
packages_to_build=myproxy,gsi_openssh
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/check-gpt-prereqs
packages="$(./make-packages.pl -a -lp -deps -deporder -bundles=$bundles -packages=$packages_to_build ${tag:+-t "${tag}"}| \
    awk "/at version/ { gsub(/_/, \"-\", \$1); print \$1 }")"
packages="$(echo "${packages}" | egrep -v 'myproxy|gsi_openssh'; echo myproxy; echo gsi_openssh)"

./make-packages.pl -no-updates -a -deps -deporder -bundles=$bundles -packages=$packages_to_build -a -flavor=gcc64dbg
cd gpt-3.3/packaging_tools
sh ./bootstrap
make dist
cp gpt-3.3.tar.gz ../../package-output
cd ../../package-output

# Some gpt packages are in the bundles but not packaged yet. We'll ignore
# errors trying to generate srpms from those with || true below
for i in *.tar.gz; do rpmbuild -ts --nodeps $i || true; done

# gsi-openssh doesn't quite work this way, so we do it explicitly
cp gsi_openssh-*-src.tar.gz $HOME/SOURCES/
rpmbuild -bs --nodeps ../source-trees/gssapi-openssh/openssh/gsi_openssh.spec

for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-libs-[0-9]*rpm" -o \
                             -name "$i-admin-[0-9]*rpm" -o \
                             -name "$i-server-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm")"
        
        sudo rpm --noscripts -Uvh $rpms < /dev/null;
    fi
done

# Move rpms out of the way so that find can work when installing.
cd $topdir
mv RPMS RPMS.x86_64
mkdir RPMS

pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|^gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo rpm --noscripts -e --allmatches $pkgs_to_rm < /dev/null
fi
for i in grid-packaging-tools $packages; do
    if test -f $topdir/SRPMS/$i-[0-9]*.rpm; then
        rpmbuild --target $target32 \
                 --rebuild $topdir/SRPMS/$i-[0-9]*src.rpm
        rpmsdir=$topdir/RPMS

        rpms="$(find $rpmsdir -name "$i-[0-9]*rpm" -o \
                             -name "$i-progs-[0-9]*rpm" -o \
                             -name "$i-libs-[0-9]*rpm" -o \
                             -name "$i-admin-[0-9]*rpm" -o \
                             -name "$i-server-[0-9]*rpm" -o \
                             -name "$i-devel-[0-9]*rpm" -o \
                             -name "$i-doc-[0-9]*rpm")"
        
        sudo rpm --noscripts -Uvh $rpms < /dev/null;
    fi
done

cd $topdir

mv RPMS.x86_64/x86_64 RPMS
mv RPMS.x86_64/noarch/* RPMS/x86_64

if [ "$sign" = 1 ]; then
    find RPMS -name '*.rpm' -exec expect ${bamboodir}/sign-rpm {} \;
    find SRPMS -name '*.rpm' -exec expect ${bamboodir}/sign-rpm {} \;
fi

# Create yum repo configuration package that includes the path to the
# yum repositories and the public GPG key
sh ${bamboodir}/create-repo-pkg -n "${osname}" -v "${osver}"
if test "$artifactroot" != ""; then
    sh ${bamboodir}/create-repo-pkg -n "${osname}" -v "${osver}" \
    -b "$artifactroot/repo/\$osname/\\\$releasever/\\\$basearch/" \
    -s "$artifactroot/repo/\$osname/\\\$releasever/SRPMS/" \
    -r Globus-bamboo-config
fi

reporoot="${topdir}/repo"
repodir="${reporoot}/${osname}/${osver}"

# Generate YUM repositories for the different package types
mkdir -p "${repodir}"
cp -R RPMS/x86_64 "${repodir}"
mkdir "${repodir}"/i386
cp -R RPMS/i?86/* "${repodir}"/i386

cp RPMS/noarch/*.rpm "${repodir}"/x86_64/
cp RPMS/noarch/*.rpm "${repodir}"/i386/

if grep -Eq 'Scientific Linux|Red Hat Enterprise Linux' /etc/redhat-release
then
    cp RPMS/i?86/*.rpm "${repodir}"/x86_64/
fi
cp -R SRPMS "${repodir}"

# Generate group definition for globus-gridftp
cat > globus-gridftp.xml <<EOF
<comps>
  <group>
    <id>globus-gridftp</id>
    <name>globus-gridftp</name>
    <default>true</default>
    <description>Globus GridFTP Server and Client RPMS</description>
    <uservisible>true</uservisible>
    <packagelist>
      <packagereq type="default">globus-gridftp-server-progs</packagereq>
      <packagereq type="default">globus-gass-copy-progs</packagereq>
      <packagereq type="default">globus-common-progs</packagereq>
      <packagereq type="default">globus-gsi-cert-utils-progs</packagereq>
      <packagereq type="default">globus-proxy-utils</packagereq>
    </packagelist>
  </group>
</comps>
EOF

createrepo "${reporoot}/$osname/$osver/SRPMS"
createrepo -g "$(pwd)/globus-gridftp.xml" "${reporoot}/$osname/$osver/x86_64"
createrepo -g "$(pwd)/globus-gridftp.xml" "${reporoot}/$osname/$osver/i386"

# Export the package lists for the full set of RPMS we generated (64- and
# 32-bit forms)
allpkgs64="$(find "${reporoot}/${osname}/${osver}/"x86_64 -name '*.rpm' | \
    grep -v '\.i386\.rpm' | \
    sed -e 's|.*/||' -e 's|\.rpm||')"
allpkgs32="$(find "${reporoot}/${osname}/${osver}/"i386 -name '*.rpm' | \
    sed -e 's|.*/||' -e 's|\.rpm||')"

echo "$allpkgs32" > packages.gcc32
echo "$allpkgs64" > packages.gcc64

# Remove what we built
pkgs_to_rm="$(rpm -qa | (egrep '^grid-packaging-tools|^[Gg]lobus-|^myproxy|gsi_openssh' || true) )"
if [ -n "$pkgs_to_rm" ]; then
    sudo rpm --noscripts -e --allmatches $pkgs_to_rm  < /dev/null
fi
