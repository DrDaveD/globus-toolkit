#! /bin/sh

set -e
set -x

usage()
{
    echo "Usage: $0 [-a ARTIFACTROOT] [-S] [-t TAG]"
}

get_package_filenames()
{
    pkgdir="$1"
    shift

    cd "$pkgdir"
    for i; do
        ls -1 "${i}"_*.deb
    done
    cd "$OLDPWD"
}
umask 022

PATH=$PATH:/usr/sbin:/sbin
orighome=$HOME
packagingdir="$(pwd)"
bamboodir=$(pwd)/bamboo-scripts
debiandir=$(pwd)/debian
topdir="$(pwd)/debbuild"
releasename=""
tmppath=$(pwd)/tmp
artifactroot=""
globusversion=""

sign=1
quick=0
tag=""
flavor=unset
osname="$(lsb_release -is | tr '[[:upper:]]' '[[:lower:]]')"
osver="$(lsb_release -rs)"
releasename="$(lsb_release -cs)"
artifactroot=""
chroot=""
in_chroot=0
chroot_args=""
binaryonly=0

while getopts ibc:n:v:R:a:St:hg:f:q i; do
    case "$i" in
        i)
           in_chroot=1
           ;;
        b)
            binaryonly=1
            chroot_args="${chroot_args:+$chroot_args}-b"
           ;;
        c)
            chroot="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-i"
            ;;
        n)
            osname="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-n $OPTARG"
            ;;
        v)
            osver="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-v $OPTARG"
            ;;
	R)
	    releasename="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-R $releasename"
	    ;;
        a)
            artifactroot="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-a $artifactroot"
            ;;
	S)
	    sign=0 
            chroot_args="${chroot_args:+$chroot_args }-S"
	    ;;
        t)
            tag="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-t $OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        g)
            if ! expr "$OPTARG" : "[0-9]*\.[0-9]*\.[0-9]*" > /dev/null; then
                echo "Invalid GT version $OPTARG" 1>&2
                exit 1
            fi
            globusversion="$OPTARG"
            chroot_args="${chroot_args:+$chroot_args }-g $OPTARG"
            ;;
	f)
            flavor="$OPTARG"
            ;;
	q)
           quick=1
            chroot_args="${chroot_args:+$chroot_args }-q"
           ;;
    esac
done

if [ $in_chroot -eq 0 ]; then
    if [ -d "${topdir}.old" ]; then
        rm -rf "${topdir}.old"
    fi
    if [ -d "${topdir}" ]; then
        mv "${topdir}" "${topdir}.old"
    fi
    mkdir -p "$topdir"
fi

if [ "$sign" = 1 ]; then
    # Copy GPG keyring to $topdir
    cp -R $HOME/.gnupg $topdir/.gnupg
fi

if [ "$flavor" = "unset" ]; then
    debarch=$(dpkg-architecture -qDEB_BUILD_ARCH) 
    case $debarch in
	amd64|ia64)
	    flavor=gcc64
	    ;;
	i?86)
	    flavor=gcc32
	    ;;
	*)
	    echo "Don't know flavor for architecture ${debarch}, use -f FLAVOR" 1>&2
	    exit 1
	    ;;
    esac
fi

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

# Remove everything prior to building
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' '*myproxy*' 'gsi-openssh*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

bundles=globus-data-management-server,globus-data-management-client,globus-data-management-sdk,globus-resource-management-server,globus-resource-management-client,globus-resource-management-sdk,gram5-condor,gram5-pbs,gram5-sge,globus-simple-ca
packages_to_build=myproxy,gsi_openssh,globus_gram_audit
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/check-gpt-prereqs
find debian \( -name rules -o -name '*.postinst' -o -name '*.init' \) -exec chmod a+x {} + 

if [ "$quick" -eq 1 ]; then
    lpopts="-no-updates"
fi
packages="$(./make-packages.pl $lpopts -ab -a -lp -deps -deporder -bundles=$bundles -packages=$packages_to_build -flavor=${flavor} ${tag:+-t "${tag}"} | \
	awk "/at version/ { print \$1 }" )"
packages="$(echo "${packages}" | egrep -v 'myproxy|gsi_openssh'; echo myproxy; echo gsi_openssh)"

if [ "$quick" -eq 1 ]; then
	mv package-output.old package-output
else
	./make-packages.pl -no-updates -deps -deporder -bundles=$bundles -packages=$packages_to_build -a -flavor=${flavor}
	cd gpt/packaging_tools
	sh ./bootstrap
	rm gpt*.tar.gz || true
	./configure
	make dist
	cp gpt*.tar.gz ../../package-output
fi
cd $topdir

if [ "$chroot" != "" ]; then
    HOME="$orighome"
    schroot -c "$chroot" -d "$packagingdir" -p -- bash $0 $chroot_args 
    HOME="$topdir"
    if [ -d "${topdir}-${chroot}" ]; then
        if [ -d "${topdir}-${chroot}.old" ]; then
            rm -rf "${topdir}-${chroot}.old"
        fi
        mv "${topdir}-${chroot}" "${topdir}-${chroot}.old"
    fi
    mv "${topdir}" "${topdir}-${chroot}"
    mkdir "${topdir}"
    cp -R "${orighome}/.gnupg" "${topdir}/.gnupg"
    cd "${topdir}"
fi

for i in grid-packaging-tools $packages; do
    debname="$(echo "$i" | tr _ -)"
    if [ ! -d "$debiandir/$debname" ]; then
        echo "Skipping $debname---no debian metadata"
        continue
    fi
    striplevel=1
    debout="$(awk -F: '/^Package: / { gsub("[ \t\r]", "", $2); print $2 }' "$debiandir/$debname/debian/control")"
    if [ "$i" = grid-packaging-tools ]; then
        tarball="$(basename $topdir/../package-output/gpt-[0-9]*.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\).*.tar.gz")"
    elif [ "$i" = gsi_openssh ]; then
	tarball="$(basename $topdir/../package-output/gsi_openssh-*-src.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\)-src.tar.gz")"
	striplevel=2
    else
        tarball="$(basename $topdir/../package-output/$i-[0-9]*.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\).*.tar.gz")"
    fi
    if test -d "$debiandir/$debname"; then
	cp -R $debiandir/$debname $debname
	tar --strip $striplevel -C "$debname" \
		-zxf "$topdir/../package-output/$tarball"
	cp $topdir/../package-output/$tarball "$topdir/${debname}_${pkgversion}.orig.tar.gz"

        cd "$debname";
       fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
	cd -
	sudo dpkg -i $(get_package_filenames "$topdir" $debout)
    fi
done

# Build repo definition package if not in a chroot
if [ $in_chroot = 0 ]; then
    cp -R "$debiandir/globus-repository" "$topdir/globus-repository"

    cd "$topdir/globus-repository"
    autoreconf -i

    # Modify globus-repository to generate globus-repository-@RELEASENAME@
    # packages
    sed -e "s/@RELEASENAME@/${releasename}/g" \
        < debian/control.in > debian/control
    rm -f debian/control.in

    mv debian/globus-repository.postinst \
        debian/globus-repository-${releasename}.postinst
    mv debian/globus-repository.postrm \
        debian/globus-repository-${releasename}.postrm

    if test -n "$artifactroot"; then
           DEB_CONFIGURE_USER_FLAGS=--with-bamboo-artifact-url=$artifactroot fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
    else
           DEB_CONFIGURE_USER_FLAGS=--with-toolkit-version=$(cat $packagingdir/fait_accompli/version) fakeroot dpkg-buildpackage -sa ${binaryonly:+-b}
    fi
fi

cd "${topdir}"

# Remove what we built from the system
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' '*myproxy*' 'gsi-openssh*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

# Move the results into an artifact directory
rm -rf "${packagingdir}/repo.old"
if [ -d "${packagingdir}/repo" ]; then
    mv "${packagingdir}/repo" "${packagingdir}/repo.old"
fi
mkdir "${packagingdir}/repo"
cd "${packagingdir}/repo"
mkdir conf
if [ $sign = 1 ]; then
    signwithline="$(printf "\nSignWith: yes")"
else
    signwithline=""
fi
cat > conf/distributions <<EOF
Label: Globus Toolkit
Suite: unstable
Codename: $releasename
Version: $osver
Architectures: amd64 i386 source
Components: contrib$signwithline
Description: Globus Toolkit Packages

EOF

if [ "$in_chroot" -eq 0 ]; then
    for x in "${topdir}"/*.changes; do
        reprepro -b . include unstable "$x"
    done

    if [ "$chroot" != "" ]; then
        for x in "${topdir}-${chroot}"/*.changes; do
            case "$(basename $x)" in
                grid-packaging-tools*|globus-simple-ca*|globus-repository*)
                   ;;
               *)
                   reprepro -b . include unstable "$x"
                   ;;
           esac
        done
    fi

    cd "${packagingdir}"
    find repo -name '*.deb' -exec basename {} \; > all-packages

    mkdir -p debbuild-out
    cp "${topdir}"/*.* debbuild-out
fi
