#! /bin/sh

set -e

usage()
{
    echo "Usage: $0 -n OSNAME -R RELEASENAME -v OSVER [-a ARTIFACTROOT] [-S] [-t TAG]"
}

get_package_filenames()
{
    pkgdir="$1"
    shift

    cd "$pkgdir"
    for i; do
        ls -1 "${i}"_*.deb
    done
    cd "$OLDPWD"
}
umask 022

PATH=$PATH:/usr/sbin:/sbin
packagingdir="$(pwd)"
bamboodir=$(pwd)/bamboo-scripts
debiandir=$(pwd)/debian
topdir="$(pwd)/debbuild"
releasename=""
tmppath=$(pwd)/tmp
artifactroot=""
args=$(getopt n:v:R:a:St:hg:f: $*)
globusversion=""
set -- ${args}

sign=1
tag=""
flavor=gcc64dbg

for i; do
    case "$i" in
        -n)
            osname="$2"
            shift
            shift
            ;;
        -v)
            osver="$2"
            shift
            shift
            ;;
	-R)
	    releasename="$2"
	    shift 2
	    ;;
        -a)
            artifactroot="$2"
            shift
            shift
            ;;
	-S)
	   sign=0 
	   shift
	    ;;
        -t)
           tag="$2"
           shift 2
           ;;
        -h)
           usage
           exit 0
           ;;
        -g)
           if ! expr "$2" : "[0-9]*\.[0-9]*\.[0-9]*" > /dev/null; then
               echo "Invalid GT version $2" 1>&2
               exit 1
           fi
           globusversion="$2"
           shift 2
           ;;
	-f)
           flavor="$2"
           shift 2
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$osname" = "" -o "$osver" = "" -o "$releasename" = "" ]; then
    usage 1>&2
    exit 1
fi

if [ -d "${topdir}.old" ]; then
    rm -rf "${topdir}.old"
fi
if [ -d "${topdir}" ]; then
    mv "${topdir}" "${topdir}.old"
fi
mkdir -p "$topdir"
if [ "$sign" = 1 ]; then
    # Copy GPG keyring to $topdir
    cp -R $HOME/.gnupg $topdir/.gnupg
fi

# Reset home to this directory as it is a transient bamboo build dir
HOME=$topdir

# Remove everything prior to building
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

bundles=globus-data-management-server,globus-data-management-client,globus-data-management-sdk,globus-simple-ca
packages_to_build=myproxy,gsi_openssh
chmod a+x make-packages.pl fait_accompli/installer.sh gpt/build_gpt gpt/make_gpt_dist gpt/setup_gpt_dist gpt/packaging_tools/bootstrap gpt/check-gpt-prereqs
packages="$(./make-packages.pl -ab -a -lp -deps -deporder -bundles=$bundles -packages=$packages_to_build ${tag:+-t "${tag}"} | \
	awk "/at version/ { print \$1 }" )"
packages="$(echo "${packages}" | egrep -v 'myproxy|gsi_openssh'; echo myproxy; echo gsi_openssh)"

./make-packages.pl -no-updates -deps -deporder -bundles=$bundles -packages=$packages_to_build -a -flavor=${flavor} -ab
cd gpt/packaging_tools
sh ./bootstrap
rm gpt*.tar.gz || true
./configure
make dist
cp gpt*.tar.gz ../../package-output
cd $topdir

for i in grid-packaging-tools $packages; do
    debname="$(echo "$i" | tr _ -)"
    if [ ! -d "$debiandir/$debname" ]; then
        echo "Skipping $debname---no debian metadata"
        continue
    fi
    striplevel=1
    debout="$(awk -F: '/^Package: / { gsub("[ \t\r]", "", $2); print $2 }' "$debiandir/$debname/debian/control")"
    if [ "$i" = grid-packaging-tools ]; then
        tarball="$(basename $topdir/../package-output/gpt-[0-9]*.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\).*.tar.gz")"
    elif [ "$i" = gsi_openssh ]; then
	tarball="$(basename $topdir/../package-output/gsi_openssh-*-src.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\)-src.tar.gz")"
	striplevel=2
    else
        tarball="$(basename $topdir/../package-output/$i-[0-9]*.tar.gz)"
	pkgversion="$(expr "$tarball" : ".*-\([0-9\.]*\).*.tar.gz")"
    fi
    if test -d "$debiandir/$debname"; then
	cp -R $debiandir/$debname $debname
	tar --strip $striplevel -C "$debname" \
		-zxf "$topdir/../package-output/$tarball"
	cp $topdir/../package-output/$tarball "$topdir/${debname}_${pkgversion}.orig.tar.gz"

        cd "$debname";
	fakeroot dpkg-buildpackage -uc -us
	cd -
	sudo dpkg -i $(get_package_filenames "$topdir" $debout)
    fi
done

# Remove what we built from the system
pkgs_to_rm="$(dpkg-query -W -f="\${Package}\t\${Status}\n" '*globus*' 'grid-packaging*' | awk -F"	" "\$2 ~ /^install/ { print \$1 }" || true)"
if [ -n "$pkgs_to_rm" ]; then
    sudo dpkg -r $pkgs_to_rm
fi

# Move the results into an artifact directory
mkdir "${packagingdir}/repo"
cd "${packagingdir}/repo"
mkdir conf
cat > conf/distributions <<EOF
Label: Globus Toolkit
Suite: unstable
Codename: $releasename
Version: $osver
Architectures: amd64 i386 source
Components: contrib
Description: Globus Toolkit Packages

EOF

for x in "${topdir}"/*.changes; do
    reprrepro -b . include unstable "$x"
done

cp $topdir/*.* .
