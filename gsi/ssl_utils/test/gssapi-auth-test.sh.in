#!/bin/sh
######################################################################
#
# gssapi-auth-test.sh
#
# Use gss-client and gss-server to make sure basic gssapi
# authentication works.
#
######################################################################

######################################################################
#
# Where to find various certificates
#
SERVER_CERTDIR=@SERVER_CERTDIR@
CLIENT_CERTDIR=@CLIENT_CERTDIR@
CA_CERTDIR=@CA_CERTDIR@

######################################################################
#
# Binaries
#

GSS_SERVER=./gss-server
GSS_CLIENT=./gss-client
GSS_ASSIST_CLIENT=./gss-assist-client
GRID_PROXY_INIT=${GLOBUS_LOCATION}/bin/grid-proxy-init

######################################################################
#
# Defaults for execution
#
PORT=8787
GSS_SERVER_ARGS="-once"
MESSAGE="This is a test. ABC123"
GSS_SERVER_LOG="server.log"
GSS_CLIENT_PROXY_INIT_LOG="proxy_init.log"
CLIENT_PROXY=/tmp/gsi_test_cp.$$
SERVER_PROXY=/tmp/gsi_test_sp.$$

######################################################################
#
# Get the service name
#
SERVICE_FILE=${SERVER_CERTDIR}/service_name
SERVICE=`cat $SERVICE_FILE`

######################################################################
#
# Set up common environment
#
X509_CERT_DIR=${CA_CERTDIR}
export X509_CERT_DIR


cleanup()
{
  echo "Cleaning up"

  rm -f ${CLIENT_PROXY}
  rm -f ${SERVER_PROXY}

  if [ -n "${GSS_SERVER_PID}" ]; then
    kill ${GSS_SERVER_PID} > /dev/null 2>&1
  fi
}

######################################################################
#
# Main code
#

echo "Runing basic gssapi authentication test"

######################################################################
#
# Subroutines
#

echo "Spawning server ${GSS_SERVER}..."
echo "  server log is ${GSS_SERVER_LOG}"

(
  X509_USER_CERT=${SERVER_CERTDIR}/cert.pem
  export X509_USER_CERT 

  X509_USER_KEY=${SERVER_CERTDIR}/key.pem
  export X509_USER_KEY

  # Get a proxy for the server
  #
  # We need to do this because if the user running this
  # has a proxy certificate in the default place then the
  # server will always try to use it unless we provide it
  # with one.
   
  echo "Getting proxy certificate for the server..."
  X509_USER_PROXY=${SERVER_PROXY}
  export X509_USER_PROXY

SERVER_PASSPHRASE_FILE=${SERVER_CERTDIR}/passphrase
cat ${SERVER_PASSPHRASE_FILE} | ${GRID_PROXY_INIT} -pwstdin

  echo "Executing server..."

  exec ${GSS_SERVER} ${GSS_SERVER_ARGS} -port ${PORT} "${SERVICE}"

) > ${GSS_SERVER_LOG} 2>&1 &

GSS_SERVER_PID=$!


echo "Sleeping to give server a chance to start..."
sleep 6
echo "Done sleeping"

#
# Set up the client environment
#
X509_USER_CERT=${CLIENT_CERTDIR}/cert.pem
export X509_USER_CERT 

X509_USER_KEY=${CLIENT_CERTDIR}/key.pem
export X509_USER_KEY

X509_USER_PROXY=${CLIENT_PROXY}
export X509_USER_PROXY

#
# Get proxy for client
# We put the output to a log file here because the proxy-init program
# prints a unknown number of "."'s as it generates the proxy key pair
# and this confuses the run-tests script.
#
echo "Getting proxy certificate for client"
echo "  logging output to ${GSS_CLIENT_PROXY_INIT_LOG}"

CLIENT_PASSPHRASE_FILE=${CLIENT_CERTDIR}/passphrase
cat ${CLIENT_PASSPHRASE_FILE} | ${GRID_PROXY_INIT} -pwstdin > ${GSS_CLIENT_PROXY_INIT_LOG} 2>&1

STATUS=$?
if [ ${STATUS} -ne 0 ]; then
  echo "Error getting proxy certificate: status is ${STATUS}"
  cat ${GSS_CLIENT_PROXY_INIT_LOG}
  cleanup
  exit ${STATUS}
fi

#
# And run gss test
#
echo "Running client ${GSS_CLIENT}"

${GSS_CLIENT} -port ${PORT} localhost "${SERVICE}" "${MESSAGE}"

STATUS=$?

if [ ${STATUS} -ne 0 ]; then
  echo "Error running GSS test: status is ${STATUS}"
  echo ""
  cleanup
  echo "Server log:"
  cat ${GSS_SERVER_LOG}
  exit ${STATUS}
fi

######################################################################
#
# Success
#

cleanup
echo "Success".
exit 0

#
# End code
#
######################################################################
