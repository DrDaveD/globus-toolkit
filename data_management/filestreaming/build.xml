<?xml version="1.0"?>

<!-- ===================================================================

Build script for building bits of OGSA outside of the main tree.

Useful targets are:

  compile - compiles
  jar - makes a jar

Copyright (c) 1999 University of Chicago and The University of 
Southern California. All Rights Reserved.

==================================================================== -->


<project default="all" basedir=".">


  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->

  <property file="${user.home}/build.properties"/>
  <property file="build.properties"/>
  <property name="ogsa.root" value="../../ogsa/impl/java"/>
  <property file="${ogsa.root}/ogsa.properties"/>

<!-- the name of the jarfile to generate -->
  <property name="jar.file" value="filestreaming.jar" />
  <property name="gar.file" value="filestreaming.gar" />
  <property name="build.dir" value="build" />
  <property name="Name" value="OGSA"/>
  <property name="src.dir" value="./src"/>
  <property name="build.dest" value="${build.dir}/classes"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.services" value="${ogsa.root}/build-services.xml"/>
  <property name="server.deploy" value="server-deploy.wsdd"/>
  <property name="server.config" value="server-config.wsdd"/>
  <property name="core.config" value="${ogsa.root}/${server.config}"/>
  <property name="stubs.dir" value="./build/stubs"/>
  <property name="schema.dir" value="schema"/>
  <property name="build.schema" value="${schema.dir}"/>
  <property name="streaming.schema.dir" value="base/streaming"/>
  <property name="schema.origin" value="${ogsa.root}/schema"/>
  <property name="build.packages" value="build-packages.xml"/>
  <property name="test-reports.dir" value="test-reports"/>
  <property name="mapping.file" value="NStoPkg_FSS.properties"/>
  <property name="stubs.dest" value="../build/stubs"/>
  
  
  <!-- properties added for filestreaming -->

  <target name="setenv">
    <basename property="ogsa.root.base" file="${ogsa.root}"/>
    <dirname property="absolute.ogsa.root.parent.path" file="${ogsa.root}"/>
    <property name="absolute.ogsa.root"
              value="${absolute.ogsa.root.parent.path}/${ogsa.root.base}"/>
 
    <path id="classpath">
        <pathelement location="."/>
        <pathelement location="${java.home}/../lib/tools.jar"/>
        <pathelement location="${build.dest}"/>
        <pathelement location="${ogsa.root}/${build.dest}"/>
        <fileset dir="${absolute.ogsa.root}/lib">
            <include name="*.jar"/>
            <exclude name="${jar.name}"/>
        </fileset>
        <pathelement path="${java.class.path}"/>
    </path>

    <path id="test-classpath">
        <pathelement location="${build.dest}" />
        <path refid="classpath"/>
    </path>

    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>

    <available property="key.present" file="${keystore}" />
    <available property="stubs.present" type="dir" file="${stubs.dir}" />

    <echo message=" Build environment for ${Name} " />
    <echo message=" Flags (Note: If the {property name} is displayed, "/>
    <echo message="           then the component is not present)" />
    <echo message=""/>
    <echo message=" Property values " />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />

    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>


  </target>

  <target name="copySchemaDir">
    <copy toDir="${schema.dir}">
        <fileset dir="${schema.origin}" casesensitive="yes">
            <exclude name="base/streaming/file_stream*"/>
        </fileset>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!-- Generate Service and Binding wsdls from port type wsdls             -->
  <!-- =================================================================== -->
  <target name="generateWSDL" unless="stubs.present" depends="setenv">
   <antcall target="copySchemaDir"/>
   <ant antfile="${ogsa.root}/${build.services}" target="GWSDL2WSDL">
    <property name="build.schema.dir" value="${streaming.schema.dir}"/>
    <property name="wsdl.root" value="file_stream_factory_port_type"/>
    <reference refid="classpath"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateBinding">
    <property name="binding.root" value="file_stream_factory"/>
    <property name="build.schema.dir" value="${streaming.schema.dir}"/>
    <property name="porttype.wsdl" value="file_stream_factory_port_type.wsdl"/>
    <reference refid="classpath"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="GWSDL2WSDL">
    <property name="build.schema.dir" value="${streaming.schema.dir}"/>
    <property name="wsdl.root" value="file_stream_port_type"/>
    <reference refid="classpath"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateBinding">
    <property name="binding.root" value="file_stream"/>
    <property name="build.schema.dir" value="${streaming.schema.dir}"/>
    <property name="porttype.wsdl" value="file_stream_port_type.wsdl"/>
    <reference refid="classpath"/>
   </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Generate stubs from the WSDLs                                       -->
  <!-- =================================================================== -->
  <target name="stubs" unless="stubs.present" depends="generateWSDL">
    <ant antfile="${ogsa.root}/${build.services}" target="mergePackageMapping">
        <property name="mapping.file" value="${mapping.file}"/>
    </ant>

    <ant antfile="${ogsa.root}/${build.services}" target="generateStubsNS"
         inheritrefs="false">
        <property name="build.schema" value="${schema.dir}"/>
        <property name="schema.file.dir" value="${streaming.schema.dir}"/>
        <property name="schema.file" value="file_stream_factory_service.wsdl"/>
        <!-- Command run from within schema dir -->
        <reference refid="classpath"/>
    </ant>
    <ant antfile="${ogsa.root}/${build.services}" target="generateStubsNS"
         inheritrefs="false">
        <property name="build.schema" value="${schema.dir}"/>
        <property name="schema.file.dir" value="${streaming.schema.dir}"/>
        <property name="schema.file" value="file_stream_service.wsdl"/>
        <!-- Command run from within schema dir -->
        <reference refid="classpath"/>
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="compileStubs">
    <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
      <include name="**/streaming/*" />
      <exclude name="**/test/*" />
    </javac>
 </target>

  <target name="compileStubs" depends="stubs">
    <javac srcdir="${schema.dir}/${stubs.dest}" destdir="${build.dest}"
      debug="${debug}"
      deprecation="${deprecation}"
      classpathref="classpath">
    </javac>
 </target>

  <target name="jar" depends="compile">
    <jar jarfile="${build.lib}/${jar.file}" basedir="${build.dest}" >
      <include name="org/globus/ogsa/impl/base/streaming/**" />
      <include name="org/globus/ogsa/base/streaming/**" />
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Build EVERYTHING from scratch!                                      -->
  <!-- =================================================================== -->
  <target name="all" depends="gar"/>

 
  <!-- Gar Packaging -->
  <target name="gar" depends="jar">
    <ant antfile="${ogsa.root}/${build.packages}" target="makeGar">
      <property name="gar.name" value="${build.lib}/${gar.file}"/>
      <property name="garlib.dir" value="${build.lib}"/>
      <property name="garserverdeployment.file" value="${server.deploy}"/>
      <property name="garschema.origin" value="./schema/base/streaming"/>
      <property name="garschema.path" value="base/streaming"/>
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the JUnit testcases                                        -->
  <!-- =================================================================== -->

  <target name="buildTest" depends="compile">
    <echo message="${absolute.ogsa.root}"/>
    <javac  srcdir="${src.dir}" destdir="${build.dest}"
            debug="${debug}">
      <classpath>
        <pathelement location="${build.lib}/${jar.name}"/>
        <path refid="test-classpath"/>
      </classpath>
      <include name="**/test/*.java" />
    </javac>
  </target>

  <!-- merge the core server config and local server
       deployment descriptor for use with the test server -->
  <target name="deployServer">
    <copy file="${core.config}" toFile="${server.config}"/>
    <java classname="org.apache.axis.utils.Admin"
          classpathref="classpath"
          fork="yes"
          failonerror="true">
      <arg value="server"/>
      <arg value="server-deploy.wsdd"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit testcases                                            -->
  <!-- =================================================================== -->

  <target name="test" depends="buildTest,deployServer">
    <ant target="cleanTest"/>
    <mkdir dir="${basedir}/${test-reports.dir}" />
      
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
      <classpath refid="test-classpath" />
      <formatter type="xml" />
      <batchtest todir="${test-reports.dir}">
        <fileset dir="${build.dest}">
          <!-- Convention: each package that's being tested
                has its own PackageTests class collecting all the tests -->
          <include name="**/test/PackageTests.class"/>
        </fileset>
      </batchtest>
      <jvmarg value="-Dignore=ignore" />
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean">
    <ant target="cleanTest"/>
    <delete includeEmptyDirs="true" dir="${build.dir}" quiet="true"/>
  </target>

  <target name="cleanTest">
    <delete includeEmptyDirs="true" dir="${test-reports.dir}" quiet="true"/>
  </target>

  <target name="cleanStubs" depends="clean">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${schema.dir}">
        <exclude name="base/streaming/file_stream*.gwsdl"/>
      </fileset>
    </delete>

    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${src.dir}">
        <exclude name="org/globus/ogsa/impl/base/streaming/**"/>
      </fileset>
    </delete>
  </target>

  <target name="cleanAll" depends="clean">
    <ant target="cleanStubs"/>
  </target>

  <target name="deployGar" depends="gar">
       <ant antfile="${build.packages}" target="deployGar" dir="${ogsa.root}">
         <property name="gar.name" value="${basedir}/${build.lib}/${gar.file}"/>       
       </ant>
  </target>


 </project>
