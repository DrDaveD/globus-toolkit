<?xml version="1.0"?>
<!-- ===================================================================

Build script for building Community Authorization Service

Copyright (c) 1999 University of Chicago and The University of 
Southern California. All Rights Reserved.

==================================================================== -->

<project default="all" basedir=".">

  <!-- Properties file -->
  <property file="${user.home}/build.properties"/>
  <property file="build.properties"/>

  <!-- Set properties -->
  <property name="ogsa.root" value="../../ogsa/impl/java"/>
  <property file="${ogsa.root}/ogsa.properties"/>

  <property name="schema.origin" value="${ogsa.root}/schema"/>

  <!-- Existing directories -->
  <property name="src.dir" value="src"/>
  <property name="lib.dir" value="lib"/>

  <!-- Directories created during build -->
  <property name="build.dir" value="build" />
  <property name="docs.dir" value="docs"/>
  <property name="share.dir" value="share"/>
  <property name="etc.dir" value="./etc"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.dest" value="${build.dir}/classes"/>

  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="test.reports.dir" value="test-reports"/>
  <property name="schema.dir" value="schema"/>
  <property name="stubs.dir" value="src/org/globus/ogsa/base"/>
  <property name="ogsi.stubs.dir" value="src/org/gridforum"/>

  <!-- Properties for deploying service -->
  <property name="jar.name" value="multirft.jar"/>
  <property name="gar.name" value="multirft.gar"/>
  <property name="server.config" value="multirft-server-config.wsdd"/>
  <property name="garshare.dir" value="${share.dir}"/>
  <property name="client.config" value="multirft-client-config.wsdd"/>

  <!-- Properties for bindings genertion -->
  <property name="multirft.schema.dir" value="base/multirft"/>

  <!-- Set claspath -->
  <path id="classpath">
   <pathelement location="."/>

   <pathelement location="${java.home}/../lib/tools.jar"/>
   <pathelement location="${ogsa.root}/build/classes"/>
   <pathelement location="${build.dest}"/>
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${ogsa.root}/lib">
      <include name="*.jar"/>
      <exclude name="${jar.name}"/>
    </fileset>

    <pathelement path="${java.class.path}"/>
  </path>
  
  <!-- Prepare build environment -->
  <target name="setenv">
    <mkdir dir="${build.dest}"/>

    <uptodate property="javadoc.notrequired"
              targetfile="${build.javadocs}/index.html">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
    </uptodate>
    <available property="stubs.present" file="${stubs.dir}" type="dir"/>
     </target>

  <target name="copySchemaDir">
   <copy toDir="${schema.dir}">
    <fileset dir="${schema.origin}" casesensitive="yes"/>
   </copy>
  </target>
<target name="all">
<antcall target="compileAll"/>
</target>

  <!-- Generate Bindings -->
  <target name="bindings" depends="setenv">
   <antcall target="copySchemaDir"/>
   <ant antfile="${ogsa.root}/${build.services}" target="GWSDL2WSDL">
    <property name="build.schema.dir" value="${multirft.schema.dir}"/>
    <property name="wsdl.root" value="multirft_port_type"/> 
    <reference refid="classpath"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateBinding">
    <property name="binding.root" value="multirft"/>

    <property name="build.schema.dir" value="${multirft.schema.dir}"/>
    <property name="porttype.wsdl" value="multirft_port_type.wsdl"/>
    <reference refid="classpath"/>
   </ant>
     </target>

  <!-- Generate Stubs -->
  <target name="stubs" unless="stubs.present" depends="bindings"> 
    <ant antfile="${ogsa.root}/${build.services}" target="mergePackageMapping">
        <property name="mapping.file" value="./NStoPkg.properties.multirft"/>
    </ant>

   <ant antfile="${ogsa.root}/${build.services}" target="generateStubsNS">
   
    <property name="schema.file.dir" value="${multirft.schema.dir}"/>

    <property name="schema.file" value="multirft_service.wsdl"/>
    <!-- Command run from within schema dir -->
    <property name="stubs.dest" value="../src"/>
    <reference refid="classpath"/>
   </ant>
   <ant antfile="${ogsa.root}/${build.services}" target="generateStubsNS">
   
    <property name="schema.file.dir" value="${multirft.schema.dir}"/>

    <property name="schema.file" value="multirft_types.wsdl"/>
    <!-- Command run from within schema dir -->
    <property name="stubs.dest" value="../src"/>
    <reference refid="classpath"/>
   </ant>

  </target>
    <!-- Compile source and tests -->
  <target name="compileAll">
   <antcall target="compile"/>

   <antcall target="compileTests"/>
  </target>

  <!-- Compile source directory -->
  <target name="compile" depends="stubs">
   <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
    deprecation="${deprecation}"
    classpathref="classpath">
    <exclude name="**/test/*"/> 
    <!-- FIXME -->
    <exclude name="**/client/*"/> 
   </javac>
<copy todir="${build.dest}" >
<fileset dir="${src.dir}" includes="**/*security-config.xml" />
</copy>
  </target>

  <!-- Compile tests -->
  <target name="compileTests" depends="compile">
   <javac srcdir="${src.dir}" destdir="${build.dest}" debug="${debug}"
    deprecation="${deprecation}"
    classpathref="classpath">
    <include name="**/test/*"/> 
   </javac>
   <mkdir dir="${test.reports.dir}"/>
  </target>

  <!-- Run tests -->
  <target name="test" depends="compileTests">
   <mkdir dir="${test.reports.dir}"/>
    <junit printsummary="yes" haltonfailure="yes" fork="yes">
      <classpath refid="classpath"/>
      <formatter type="xml" />
      <batchtest todir="${test.reports.dir}">
        <fileset dir="${build.dir}/classes">
          <include name="**/PackageTests.class" />
        </fileset>
      </batchtest>
      <jvmarg value="-DtestServiceMachine=${testServiceMachine}" />
      <jvmarg value="-DtestServicePort=${testServicePort}" />
      <jvmarg value="-DrftRequestFile=${rftRequestFile}" />
      <jvmarg value="-DverifyTrue=${verifyTrue}"/>
    </junit>
  </target>

  <!-- Creates a jar of the relevant files -->
  <target name="jar" depends="compile">
    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/${jar.name}" basedir="${build.dest}">
     <exclude name="**/test/**"/>
     <exclude name="**/org/gridforum/**"/>
    </jar>
  </target>

 <!-- Creates a gar for the service-->
  <target name="gar" depends="jar">
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}">
          <include name="*.jar"/>
      </fileset>
    </copy>
    <ant antfile="${ogsa.root}/build-packages.xml" target="makeGar">
      <property name="gar.name" value="${build.lib}/${gar.name}"/>
      <property name="garlib.dir" value="${build.lib}"/>
      <property name="gardocs.dir" value="docs"/>
      <property name="garetc.dir" value="etc"/>

      <property name="garserverdeployment.file" value="${server.config}"/>
      <property name="garclientdeployment.file" value="${client.config}"/>
      <property name="garschema.origin" value="${schema.dir}/base/multirft"/>
      <property name="garschema.path" value="base/multirft"/>
    </ant>
   </target>

  <!-- Deploys the gar file -->
  <target name="deployGar" depends="gar">
    <ant antfile="build-packages.xml" target="deployGar" dir="${ogsa.root}">
      <property name="gar.name" value="${basedir}/${build.lib}/${gar.name}"/>
    </ant>
  </target>

  
  <!-- Cleans source and stubs -->
  <target name="cleanAll">
   <antcall target="clean"/>
   <antcall target="cleanStubs"/>
  </target>

  <target name="clean">
   <antcall target="cleanBuild"/>
   <delete dir="${test.reports.dir}"/>
  </target>

  <!-- Clean source -->
  <target name="cleanBuild">
   <delete dir="${build.dir}"/>
  </target>

  <!-- Clean bindings and stubs -->
  <target name="cleanStubs">

    <delete includeEmptyDirs="true" quiet="true">
        <fileset dir="${schema.dir}">
            <exclude name="base/multirft/multirft_port_type.gwsdl"/>
            <exclude name="base/multirft/multirft_types.wsdl"/>
        </fileset>

        <fileset dir="${src.dir}">
            <exclude name="org/globus/ogsa/gui/**"/>
            <exclude name="org/globus/ogsa/impl/**"/>
        </fileset>
    </delete>
    <delete dir="${stubs.dir}"/>
    <delete dir="${ogsi.stubs.dir}"/>
</target>

  <!-- Generate java docs -->  
  <target name="javaDocs" depends="setenv" unless="javadoc.notrequired">
    <mkdir dir="${build.javadocs}"/>
    <javadoc classpathref="classpath"
             destdir="${build.javadocs}"
             use="true"
             windowtitle="Multi RFT API ">
      <packageset dir="${src.dir}">
        <exclude name="**/databaseaccess/test/**"/>
        <exclude name="**/client/**"/>
      </packageset>
    </javadoc>

  </target>

</project>
