Mode E or Multi stream XIO driver allows parallel data transfer over multiple
transport streams. Mode e is unidirectional (client can do only writes and 
server can do only reads). User can provide a stack containing one of more 
driver(s) to use for the transfers. By default, a stack with TCP driver is 
used for the transfers. The user can also provide a pointer to a function that
sets the appropriate attribute controls for the drivers in the stack. The 
number of streams to use can be specified on the attr. The user can do a read 
with wait_for_bytes set to zero, to find the offset of the data that he is
going to get in his next read operation. This Mode E / Multi-stream protocol
uses a 17 byte header while transferring each block of data. The header 
contains the following information:

+----------------+-------------------+-------------------+
|  Descriptor    |    Byte Count     |    Offset Count   |
|    8 bits      |      64 bits      |       64 bits     |
+----------------+-------------------+-------------------+

The Descriptor is used to indicate whether this block marks End Of Data (EOD)
or this block contains the End of Data Count (EODC), which is the number of 
EOD markers that must be received or the connection needs to be closed. This
driver can also be used to do a striped data transfer. By default, it assumes 
that there is only one stripe and when the user calls close, it sends EOD 
markers on each stream and an EODC on one of the streams. The user can disable
the sending of EODC and also set EODC, so that when there are multiple stripes,
he can disable the sending of EODC on all but one stripe and can set the EODC
on the stripe that sends EODC. The user can also force this driver to send EOD
on all the streams using a data descriptor on write rather than invoking close 
to send EODs. This is useful if the user wants to reuse the channels for anotherdata transfer. 

Limitations:
Mode E driver enforces a read wait_for_bytes of 1 or 0.
Mode E driver always writes the full buffer regardless of the write
wait_for_bytes.
