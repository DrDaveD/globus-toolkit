=========
GlobusXIO
=========

Globus eXtensible Input Output library
--------------------------------------

Purpose:

GlobusXIO sets out to provide two main features

1)  Minimize the learning curve for developers writing to new IO protocols.

    In Distributed programming there are many protocols used for message
    passing.  There are typically many different APIs for using all the
    different protocols, despite the fact that they have the same end goal,
    which is moving bytes from end point to end point.

    Application developers are forced to code straight to a protocols API.
    Therefore if they ever want to change the underlying protocol they have
    to change the applications source code.  This adds to the already 
    complicated task of keeping up with the technogy curve.

    GlobusXIO provides a single API to any wire protocol.  The API has a
    very posix-like look and feel so it is very intutive to use.
    As new protocols
    are developed they can be added to GlobusXIO in the form of "drivers".
    Therefore an application programmer can code to xio and focus on the
    needs of the application.  If a few few years down the line they want
    the same appication to work with the latest and greatest protocol
    for shiping bytes around the grid, they do not have to change a 
    single line of source code.

2)  Minimize the development time for creating/prototyping new protocols.

    In grid computing research is done into how to push bytes faster
    and faster around the grid.  Proff of concept is an important part
    of this research.  A problem that often comes up is the time it takes
    to both design and implement new protocols.  

    GlobusXIO addressed these issues.  GlobusXIO provides a driver 
    developement interface that allows a developer to concentrate
    on writting code to implement the protocol.  It takes the headache 
    of error checking, asycooronous message delivery, timeouts and other
    important issues out of the protocol implementors path.

    Also it allows for a maximum reuse of code with the notion of a driver
    stack.  Each driver should be one atomic unit that can be mixed and
    matched with other drivers.  For example: gsi security binds can be 
    written once as a driver then stacked on top of tcp, netblt, udp blast,
    or any other trasport protocol.  This makes it much easier to develope
    the transport protocols, since the only focus of the developer are the 
    details of the protocol.


Design Goals:

    The two main api deliverables are listed above.  However a very important
    design goal for globus_xio is the efficiency of the system.  Extreme
    care has been taken to provide an extremely efficient system while still
    meeting the goals listed above.  It is not enough to say that a good 
    balance of optimization and ease of use has been created because 
    optimizations have been baked into the design.  Our goal is to sacrific
    little to no CPU cycles for the sake of a user friendlyness.  This is
    of course, not to say that a user friendly api has been abandoned.


