#! /bin/sh

# 
# Copyright 1999-2006 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 


. ${GLOBUS_LOCATION:-@libexecdir@}${GLOBUS_LOCATION:+/libexec}/globus-script-initializer
globus_source ${libexecdir}/globus-sh-tools.sh


#  CVS Information:
#     $Source$
#     $Date$
#     $Revision$
#     $Author$

PROGRAM_NAME=`echo $0 | ${GLOBUS_SH_SED-sed} -e 's|.*/||g'`
PROGRAM_VERSION='@VERSION@'
PACKAGE='@PACKAGE@'
VERSION='@VERSION@'
DIRT_TIMESTAMP='@DIRT_TIMESTAMP@'
DIRT_BRANCH_ID='@DIRT_BRANCH_ID@'

short_usage="$PROGRAM_NAME [-help] [-version] [-f N] [-tail N] [-r <resource manager>] -out|-err <jobID>"

long_usage()
{
    ${GLOBUS_SH_CAT-cat} >&2 <<EOF

Usage: ${short_usage}

    Retrieves the stdout (-out) or stderr (-err) from a job started with
    globus-job-submit and identified through the identifier <jobID>.

    If neither -out or -err is given, -out is assumed.

    A valid proxy is required for this operation to succeed.

    Options:
	-help, -usage           Display usage
	-version                Display version
	-resource         (-r)  Fetch output using the specified resource
                                manager
	-out, -err              Show stdout OR stderr of remote job
	-tail N           (-t)  Show last N lines of output
	-follow N         (-f)  Show last N lines of output and any new line

EOF
}

globus_source ${libexecdir}/globus-args-parser-header $*

if [ $# -lt 1 ]; then
    globus_args_short_usage
    exit 1
fi

outopt=
erropt=
jobid=
resource=
tailopt=no
followopt=no

while [ -n "$1" ]; do
    case "$1" in
	-out)
	    outopt=true
	    ;;
	-err)
	    erropt=true
	    ;;
	-r|-resource)
	    if [ -z "$2" ]; then
		globus_args_option_error "$1" "need a resource contact string"
	    fi
	    resource="$2"
	    shift
	    ;;
	-t|-tail|-f|-follow)
	    if [ -z "$2" ]; then
		globus_args_option_error "$1" "need an integer argument"
	    fi
	    if ${GLOBUS_SH_EXPR-expr} "$2" + 1 - 1 \> 0 \
		1>/dev/null 2>/dev/null
	    then
                case "$1" in
                    -t|-tail)
                        tailopt="$2"
                        ;;
                    -f|-follow)
                        followopt="$2"
                        ;;
                esac
                shift
            else
		globus_args_option_error "$1" "need an integer argument"
	    fi
	    ;;
	--)
	    break
	    ;;
	-*)
	    globus_args_unrecognized_option "$1"
	    ;;
	*)
	    if [ $# -gt 1 ]; then
		globus_args_option_error "$1" "jobID has to be last argument"
	    fi
	    jobid="$1"
	    ;;
    esac
    shift
done

stream=stdout
if [ -n "${erropt}" ] ; then
    stream=stderr
fi

if [ -z "${jobid}" ]; then
    echo "" >&2
    echo "ERROR: missing job ID" >&2
    globus_args_short_usage
    exit 1
fi

if [ -n "${outopt}" -a -n "${erropt}" ]; then
    echo "" >&2
    echo "ERROR: -out and -err are exclusive!" >&2
    globus_args_short_usage
    exit 1
fi

if [ "${followopt}" != no -a "${tailopt}" != no ]; then
    echo "" >&2
    echo "ERROR: -follow and -tail are exclusive!" >&2
    globus_args_short_usage
    exit 1
fi

if [ -z "${resource}" ]; then
    resource=`echo ${jobid} | ${GLOBUS_SH_AWK} -F: '{print $2}' | \
	${GLOBUS_SH_SED-sed} 's|/||g'`
fi

${bindir}/grid-proxy-info -exists
if [ $? -ne 0 ]; then
    echo "" >&2
    echo "ERROR: unable to locate a valid proxy" >&2
    globus_args_short_usage
    exit 1
fi

case ${tailopt}:${followopt} in
    no:no)
	# cat the file, exit
	command="\${GLOBUS_SH_CAT-cat}"
	;;
    *:no)
	# tail the file
	command="\${GLOBUS_SH_TAIL-tail} -${tailopt}"
	;;
    no:*)
	# follow the file
	command="\${GLOBUS_SH_TAIL-tail} -${followopt}f"
	;;
    *)
	echo "INTERNAL ERROR: tailopt:followopt = ${tailopt}:${followopt}" >&2
	;;
esac

tmpfile=${TMPDIR:-/tmp}/globus_job_get_output.`${GLOBUS_SH_WHOAMI-whoami}`.tmp.$$

# redirect stderr to file so we can see if error occurs after the fact
${bindir}/globusrun -s -r "$resource" 2> $tmpfile \
    "&(executable=\$(GLOBUSRUN_GASS_URL)/$bindir/globus-job-get-output-helper)
      (arguments=
            anExtraTag
            \"$jobid\"
            \"$stream\"
            \"$tailopt\"
            \"$followopt\"
            \$(GLOBUSRUN_GASS_URL))"

status=$?

if test "$status" != 0; then
    cat $tmpfile 1>&2
    rm $tmpfile
    exit $status
fi
if test -s $tmpfile; then
    cat $tmpfile 1>&2
    rm $tmpfile
    exit 1
fi
rm $tmpfile
exit 0
