/*
 * Copyright 1999-2006 University of Chicago
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.globus.exec.monitoring;

import org.globus.wsrf.ResourceKey;
import org.globus.exec.generated.StateEnumeration;

/**
 * The JobStateMonitor (JSM) is a scheduler-indpendent object which provides
 * notifications of job state changes to the Managed Job Service (MJS).
 *
 * <p>
 * It provides an interface between the process monitoring of the Scheduler
 * Event Generator (SEG) and the Managed Job Resources which contain the
 * state of a job created by the ManagedJobService (MJS).
 * </p>
 * <p>
 * The JSM contains a registry mapping scheduler-specific job identifiers to
 * Object keys which the MJS can use to map job state changes to particular
 * job resources.
 * </p>
 * <p>
 * The JSM also contains a soft-state cache of SEG events which aren't
 * yet associated with MJR keys in its registry. Events in this cache are
 * replayed if and when the MJS creates an association between a local Job
 * ID and an Object key. Events which aren't used for some
 * interval are automatically discarded by the JSM.
 * </p>
 * <p>
 * The JSM also provides a persistent state callback to periodically update
 * the persistent state information. If this information is passed back to
 * the start() method of the JSM, it will be able to resume processing
 * from where its last event and not lose any events. Some events may be
 * repeated when restarts are done, and the user of this class must be
 * prepared to handle that.
 * </p>
 */

import java.io.IOException;
import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public interface JobStateMonitor
{
    /**
     * Start processing state change events.
     *
     * Starts the monitor, filtering out all events that occured before the
     * specified timestamp.
     *
     * @param timestamp
     *     Date from which to start processing events. If <b>null</b>, then
     *     the monitoring will begin with events generated from the time the
     *     function was called.
     * @throws IllegalThreadStateException
     *     This method has already been called.
     */
    public void start(
        Date                                timestamp)
        throws                              IllegalThreadStateException;

    /**
     * Stop processing state change events.
     *
     * Blocks the current thread until communication with the state change
     * event source has been severed. No furthur events will be issued after
     * this method returns until the start() method is called again.
     */
    public void stop()
        throws                              java.io.IOException;

    /**
     * Register a mapping from local scheduler job ID to a resource key.
     *
     * Once this method has been called for a particular local job
     * identifier, the JobStateChangeListener associated with the
     * JobStatemonitor may receive notifications until the unregisterJobID
     * method has been called.
     *
     * @param localId
     *     Local job identifier. This is presumably generated by the
     *     scheduler when the job is created.
     * @param resourceKey
     *     Resource key associated with the job. This object will be
     *     passed to the JobStateChangeListener's jobStateChange method.
     */
    public void registerJobID(
        String                              localId,
        ResourceKey                         resourceKey)
        throws                              AlreadyRegisteredException;

    /**
     * Unregister a local scheduler job ID for event propagation.
     *
     * Once this method has been called for a particular local job
     * identifier, the JobStateChangeListener associated with the
     * JobStateMonitor will no longer receive notifications about this job.
     *
     * @param localId
     *     Local job identifier.
     */
    public void unregisterJobID(
        String                              localId)
        throws                              NotRegisteredException;

    public void addEvent(SchedulerEvent e);
}
