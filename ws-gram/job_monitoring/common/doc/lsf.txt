- LSF
    - RIPS (current)
      Periodically polling lsf queue via bjobs, correlating queue ID presence
      with it being pending, active, done, or failed. when not present any
      longer or done, consider it completed. jm subscribes to rips, dummy
      placeholder state is inserted into rips's queue state information until
      the next poll which will indicate job state changes. bjobs will indicate
      DONE or failed within CLEAN_PERIOD (defined in lsb.params)
      - high execution overhead polling queue
      - high memory overhead keeping state information for all jobs
      - not event driven.
    - polling in script (Job manager)
      Periodically polling pbs queue via bjobs, correlating queue ID presence
      with it being pending, active, or done. Race condition in bsub/bjobs
      signalling, so we call bhist if the job isn't present to see if it
      used to be present
      - high overhead (one process polling per job)
    - Following lsb.events logs in /cluster/lsf/6.0/work/dc/logdir
      - Logs are rotated to lsb.events.1 .. lsb.events.99 (lower numbers are
        relatively newer (lsb.events is current log)
      - Could job state span multiple logs for jobs started near end of day or
        which run for very long periods?
      - logs contain much info (job submission, job start, job start accept, 
        job execution, job status changes)
      - what permissions might the logs have?
    - Email notifications
      - lsf can send notification emails for when a job 
        begins execution, and finishes
      - is local email usually configured on scheduler front-end system?
      - can we convince admins to install something like procmail or a
        .forward pipe to handle these emails?
      - do we care about insecurity of email? potential disk full or other
        problems which could cause email notifications to fail?
